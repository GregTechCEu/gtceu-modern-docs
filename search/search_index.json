{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GregTech CEu Modern's Documentation!","text":"<p>GregTech CEu Modern is a port of GregTech Community Edition Unofficial to modern Minecraft versions.</p> <p>Work in Progress</p> <p>Please note that this documentation is currently heavily work-in-progress and therefore still missing a lot of content.</p> <p>If you can't find what you're looking for, feel free to ask us on our Discord.</p>"},{"location":"#download","title":"Download","text":"<p>You can download an offline version of this wiki here: Download Zip</p>"},{"location":"#want-to-contribute","title":"Want to Contribute?","text":"<p>If you want to contribute to this documentation site, feel free to open a pull request on its GitHub repository.</p>"},{"location":"Development/","title":"Developing GTCEu Modern","text":"<p>If you want to contribute to the development of GTCEu Modern, please feel free to submit a  pull request with your changes.</p> <p>The following pages describe a few important concepts that you will likely run into when working with our codebase.</p> <p>LDLib Docs</p> <p> LDLib-Architectury  Wiki</p> <p>This mod is based on the LDLib library for a lot of comminly used functionalities. Please refer to its documentation as well.</p> <p>Architectury Gradle Plugin</p> <p>Architectury-Wiki  Gradle Plugin</p> <p>This mod is using Architectury's build system, for compatibiliy across multiple moding platforms.</p>"},{"location":"Development/External-Resources/","title":"External Resources","text":"<p>This page contains links to external documentation that may be useful for several topics regarding development, as well as other resources you might find helpful.</p>"},{"location":"Development/External-Resources/#general-modding-docs","title":"General Modding Docs","text":"<p>Official Forge / NeoForge Docs</p> <ul> <li>Forge-Wiki </li> <li>NeoForge-Wiki</li> </ul> <p>Official Fabric Docs</p> <p>Fabric-Wiki  Mod Developer Docs</p> <p>Other Modding Docs</p> <ul> <li>Forge Community-Wiki</li> <li>MCJty's Modding Wiki</li> </ul>"},{"location":"Development/External-Resources/#ldlib","title":"LDLib","text":"<p>LDLib is the main library we're using for GTCEu-Modern.</p> <p>LDLib Docs</p> <p> LDLib-Architectury  Wiki</p>"},{"location":"Development/External-Resources/#mixins","title":"Mixins","text":"<p>Overview on using Mixins</p> <p>Fabric-Wiki  Mixins</p> <p>This is a great resource for getting started on how to use mixins, as well as a good quick reference if you're looking for how to do something specific.</p> <p>Note that this is not exclusive to Fabric, but applies for all platforms instead.</p> <p>Official Docs</p> <p> Mixin  Wiki</p> <p>A more detailed technical documentation on mixins.</p>"},{"location":"Development/External-Resources/#dfu-datafixerupper","title":"DFU (DataFixerUpper)","text":"<p>Unofficial Documentation</p> <p> Documented DataFixerUpper</p> <p>Unofficial documentation for Mojang's DataFixerUpper library.</p>"},{"location":"Development/External-Resources/#registrate-architectury","title":"Registrate &amp; Architectury","text":"<p>Using Registrate</p> <p> Registrate</p> <p>Architectury Gradle Plugin</p> <p>Architectury-Wiki  Gradle Plugin</p> <p>Note that we're only using Architectury's build system, not the library itself.</p>"},{"location":"Development/FAQ/","title":"Frequently Asked Questions","text":""},{"location":"Development/FAQ/#how-to-disable-shimmers-colored-light-monitor","title":"How to disable Shimmer's colored light monitor","text":"<p>Shimmer (one of our soft-dependencies) displays information about colored lights in development environments by default. You can turn it off using the command <code>/shimmer coloredLightMonitor</code> ingame.</p> <p>Alternatively, if you want to disable it by default, put this in your KubeJS client scripts:</p> <pre><code>// Disable Shimmer's colored light monitor:\nlet LightCounterRender = Java.loadClass(\"com.lowdragmc.shimmer.client.light.LightCounter$Render\")\nLightCounterRender.enable = false\n</code></pre>"},{"location":"Development/Glossary/","title":"Development Glossary","text":"","boost":100},{"location":"Development/Glossary/#development-glossary","title":"Development Glossary","text":"<p>Info</p> <p>This is an overview of technical terms that are commonly used in this documentation. If you're not sure what something means (or how it applies to the current context), please refer to this page.</p>","boost":100},{"location":"Development/Glossary/#client-side","title":"Client Side","text":"<p>The part of the game running on a player's computer.</p> <p>It always hosts the Remote Side. In singleplayer mode, the Server Side is hosted on the client as well. In multiplayer mode, the client connects to a dedicated server instead.</p>","boost":100},{"location":"Development/Glossary/#remote-side","title":"Remote Side","text":"<p>See also: Server Side</p> <p>The remote side is the part of the game that is connected to the game's server side. It always runs on the client.</p> <p>This side may not have the same amount of data available to it as the server does (see SyncData if you need to automatically synchronize certain data to the remote side). It also does not perform any tick update logic.</p>","boost":100},{"location":"Development/Glossary/#server-side","title":"Server Side","text":"<p>See also: Remote Side</p> <p>The server side is what one or more players connect to. In singleplayer mode, it runs on the client. In multiplayer mode, it runs on a dedicated server.</p> <p>This side usually has all of the world's data available to it and runs tick update logic. This is therefore, where TPS impact becomes relevant. In general, use </p>","boost":100},{"location":"Development/Glossary/#tps","title":"TPS","text":"<p>Short for \"ticks per second\". Should stay at exactly 20.</p> <p>See Tick Updates and Optimization for techniques on how to reduce performance impact.</p>","boost":100},{"location":"Development/General-Topics/Capabilities/","title":"How to access Capabilities of blocks and items","text":"<p>Fabric doesn't have a capability system like Forge does, but you can use several utility methods instead:</p> <pre><code>FluidTransferHelper.getFluidTransfer(...);\nItemTransferHelper.getItemTransfer(...);\nGTCapabilityHelper.getRecipeLogic(...)\nGTCapabilityHelper.getControllable(...)\nGTCapabilityHelper.getCoverable(...)\nGTCapabilityHelper.getToolable(...)\nGTCapabilityHelper.getWorkable(...)\nGTCapabilityHelper.getElectricItem(...)\nGTCapabilityHelper.getEnergyContainer(...)\n</code></pre>"},{"location":"Development/General-Topics/Energy-Fluid-Item-Storage/","title":"How to add an Item Inventory / Fluid Storage / Energy Container","text":"<p>Note</p> <p>In general, these containers should be created as <code>final</code> fields (that's what we need for the SyncData system). Set their base arguments in the constructor (you can pass args for subclasses to modify).</p>"},{"location":"Development/General-Topics/Energy-Fluid-Item-Storage/#implementations-for-recipe-processing-and-adding-capabilities","title":"Implementations for Recipe Processing and adding Capabilities","text":"<p>You can create these containers via one of the following classes:</p> <ul> <li><code>NotifiableItemStackHandler</code></li> <li><code>NotifiableFluidTank</code></li> <li><code>NotifiableEnergyContainer</code></li> </ul> <p>In general, you should prefer these classes over other implementations if possible, as they notify all listeners of internal changes to improve performance.</p> <p>IO constructor parameters:</p> <ul> <li><code>handlerIO</code>: Whether the container is regarded as input or output during recipe processing</li> <li><code>capabilityIO</code>: Whether the player can use hoppers, pipes, cables, etc. to interact with the storage</li> </ul>"},{"location":"Development/General-Topics/Energy-Fluid-Item-Storage/#general-purpose-implementations","title":"General-Purpose implementations","text":"<p>If you don't need to use the storage for recipe processing and/or providing capabilities, you can just use one of the following classes, as they are more lightweight:</p> <ul> <li><code>ItemStackTransfer</code></li> <li><code>FluidStorage</code></li> </ul>"},{"location":"Development/General-Topics/Energy-Fluid-Item-Storage/#custom-implementations","title":"Custom implementations","text":"<p>In some cases, you might need to create a custom implementation for either of these containers. To do so, use either of the following interfaces:</p> <ul> <li><code>IItemTransfer</code></li> <li><code>IFluidTransfer</code></li> <li><code>IEnergyContainer</code></li> </ul>"},{"location":"Development/General-Topics/Energy-Fluid-Item-Storage/#specialized-proxy-implementations","title":"Specialized proxy implementations","text":"<p>In case you have special requirements to your containers, you may be able to use one of these implementations in conjunction with one or more regular containers. They generally act as a proxy to the underlying container(s), while also handling these requirements.</p>"},{"location":"Development/General-Topics/Energy-Fluid-Item-Storage/#proxying-multiple-containers","title":"Proxying multiple containers","text":"<ul> <li><code>ItemTransferList</code></li> <li><code>FluidTransferList</code></li> <li><code>EnergyContainerList</code></li> </ul>"},{"location":"Development/General-Topics/Energy-Fluid-Item-Storage/#io-specific-container-proxies","title":"IO-specific container proxies","text":"<p>For proxying multiple containers, limited to a specific IO direction.</p> <ul> <li><code>IOItemTransferList</code></li> <li><code>IOFluidTransferList</code> </li> </ul>"},{"location":"Development/General-Topics/Energy-Fluid-Item-Storage/#rate-limited-proxies","title":"Rate-Limited proxies","text":"<p>Not merged yetBranch: <code>mi-ender-link</code></p> <p>If you need to proxy any item or fluid container that needs to be rate limited for insertion and extraction, you can use either of the following classes:</p> <ul> <li><code>LimitingItemTransferProxy</code></li> <li><code>LimitingFluidTransferProxy</code></li> </ul> <p>The transfer limit passed as a constructor parameter will not renew automatically. Your container will therefore stop transferring anything once this limit is reached.</p> <p>If you want to make this a rate limit instead, you will have to schedule a task that regularly resets the transfer limit to the maximum value for your task's interval:</p> Example Usage <pre><code>public class MyCover extends CoverBehavior {\n    private LimitingFluidTransferProxy transferProxy;\n    private ConditionalSubscriptionHandler rateLimitSubscription;\n\n    public MyCover(IFluidTransfer myFluidTransfer) {\n        super(/* ... */);\n\n        transferProxy = new LimitingFluidTransferProxy(\n                myFluidTransfer,\n                0L // Initial limit of 0, will be updated regularly in isRateLimitRefreshActive()\n        );\n        rateLimitSubscription = new ConditionalSubscriptionHandler(\n                this,\n                this::resetTransferRateLimit, \n                this::isRateLimitRefreshActive\n        );\n    }\n\n    @Override\n    public void onLoad() {\n        super.onLoad();\n        rateLimitSubscription.initialize(coverHolder.getLevel());\n    }\n\n    private void resetTransferRateLimit() {\n        if (transferProxy == null)\n            return;\n\n        transferProxy.setRemainingTransfer(transferRate.getMilliBuckets() * 20);\n    }\n\n    private boolean isRateLimitRefreshActive() {\n        // ...\n    }\n}\n</code></pre>"},{"location":"Development/General-Topics/Global-Data/","title":"Storing Data Globally","text":"<p>In certain cases (e.g. in a cache that holds all currently loaded instances of a machine), you might need to store data in a global (static and mutable) variable.</p> <p>When doing so, you need to ensure that remote and serverside instances don't get mixed up.</p>"},{"location":"Development/General-Topics/Global-Data/#using-sidelocalt","title":"Using <code>SideLocal&lt;T&gt;</code>","text":"<p>Not yet mergedBranch: <code>mi-ender-link</code></p> <p>To make working with this requirement easier, You can use <code>SideLocal&lt;T&gt;</code> to store your global data. It is similar to Java's <code>ThreadLocal</code>, but operates on the game's sides instead.</p> <p>If you are currently on the remote side (<code>LDLib.isRemote()</code> / on the client's <code>main</code> thread), it will return the remote side's instance of your data. Otherwise, you will get the server side's instance.</p> Example Usage <pre><code>public class MyCache {\n    private static SideLocal&lt;Map&lt;UUID, MyData&gt;&gt; cache = new SideLocal&lt;&gt;(HashMap::new);\n\n    public static void cacheData(UUID id, MyData data) {\n        cache.get().put(id, data);\n    }\n\n    public static MyData getData(UUID id) {\n        return cache.get().get(id);\n    }\n}\n</code></pre> <p>Alternatively to passing an initializer for both instances to <code>SideLocal</code>'s constructor, you can also supply separate instances for the remote and server side.</p>"},{"location":"Development/General-Topics/Handling-Fluid-Bucket-Size/","title":"Dealing with Fluid Bucket Sizes","text":"<p>The fluid systems of Forge and Fabric use different units.  Make sure you use the correct units whenever you're handling fluid amounts.</p> <p>To get the size of one bucket, use the following method:</p> <pre><code>FluidHelper.getBucket(); // returns 1000 on Forge and 81000 on Fabric.\n</code></pre>"},{"location":"Development/General-Topics/Optimization/","title":"Optimization Techniques","text":"<p>Not yet documented</p>"},{"location":"Development/General-Topics/Ore-Generation/","title":"Ore Generation","text":"<p>Due to Minecraft's worldgen limitations (1), GTCEu's ore vein generation does not use the native worldgen feature system. Instead, we have our own system of generating ore veins separately from the actual ore placement, so that ores are only ever placed for the currently generating chunk. This page roughly describes the process of generating, caching and placing ores.</p> <ol> <li>In Minecraft, worldgen features are only able to generate in a 3x3 chunk area, centered on the feature's origin chunk.    Because GTCEu introduces veins that may be larger than that (and have a random offset additionally),    the ore generation would exceed the allowed area in certain situations, causing the server thread to freeze/deadlock.</li> </ol> <p>The generation can be (roughly) split up into three steps:</p> <ul> <li>Vein Generation</li> <li>Generated Vein Caching</li> <li>Ore Placement (during chunk generation)</li> </ul> <p>This document will cover these steps from the bottom up, starting at the chunk generation mixin (<code>ChunkGeneratorMixin.gtceu$applyBiomeDecoration()</code>).</p>"},{"location":"Development/General-Topics/Ore-Generation/#chunk-generation-ore-placement","title":"Chunk Generation &amp; Ore Placement","text":"<p>The <code>ChunkGeneratorMixin</code> holds a reference to the <code>OrePlacer</code> (not to be confused with <code>OreBlockPlacer</code>) - which is used to place the generated veins' blocks into the world, limited to the currently generating chunk.</p>"},{"location":"Development/General-Topics/Ore-Generation/#generated-vein-caching","title":"Generated Vein Caching","text":"<p>When trying to generate a chunk, the <code>OrePlacer</code> will query the <code>OreGenCache</code> for a list of veins surrounding the current chunk.</p> <p>The radius for querying the surrounding area is determined by the <code>oreVeinRandomOffset</code> config option, as well as the largest registered vein size. It is therefore automatically compatible with any additional (or changed default) veins registered through either KubeJS, or by an addon.</p> <p>Of course, the ore gen cache can only hold a limited amount of generated veins at once (see the <code>oreGenerationChunkCacheSize</code> config option).</p>"},{"location":"Development/General-Topics/Ore-Generation/#randomness","title":"Randomness","text":"<p>Because veins may be removed from the cache before all of their chunks are generated, it is extremely important that the ore generation is fully deterministic!  </p> <p>This ensures that we do not generate ore veins that are either cut off, or have a mismatch in shape or type across chunk borders. It also automatically applies across game restarts, keeping continuity even then.</p> <p>The only situation where ore veins will differ across chunk borders (other than certain internal changes to the generation, of course), is after the relevant config options have been changed.</p> <p>In our case, that means that the <code>RandomSource</code>s used for world generation must be completely new for generating each vein, so that its type, shape, offset, contents, etc. are not influenced by previous queries to the random generator. It is completely and exclusively seeded from the world's seed, as well as the chunk position.</p> <p>For the random ore vein offset, we also include the vein's world generation layer in the random seed. This may need to include an additional component in the future, in case we add support for multiple veins per chunk and worldgen-layer.</p>"},{"location":"Development/General-Topics/Ore-Generation/#vein-generation","title":"Vein Generation","text":"<p>Whenever the <code>OreGenCache</code> cannot find a vein for a specific chunk, it will request a list of that chunk's <code>GeneratedVein</code>s from the <code>OreGenerator</code>.</p> <p>The <code>OreGenerator</code> is responsible for determining a vein's type, its origin (influenced by the <code>oreVeinRandomOffset</code> config option), as well as providing the appropriate randomness source to the used implementation of <code>VeinGenerator</code>.</p> <p>Vein Origin vs Center</p> <p>A vein's origin is always the chunk it originates in, regardless of the random offset. The actual center of a vein is influenced by the random offset and might not be located at the chunk center - or in the same chunk at all.</p> <p>Once the relevant <code>VeinGenerator</code> implementation has finished generating the vein's shape, it will be cached per chunk, inside a <code>GeneratedVein</code>.</p>"},{"location":"Development/General-Topics/Ore-Generation/#veingenerator-and-oreblockplacer","title":"<code>VeinGenerator</code> and <code>OreBlockPlacer</code>","text":"<p>A vein generator is what will generate the actual shape of the vein.</p> <p>It should, however, never try to place any blocks directly. Instead, its <code>generate()</code> method will only return a map of <code>OreBlockPlacer</code>s by block position, which are responsible for actually placing the blocks in the world, as soon as a chunk generates. Each <code>OreBlockPlacer</code> should only place either a single block, or no block.</p>"},{"location":"Development/General-Topics/Ore-Generation/#using-randomness-in-oreblockplacers","title":"Using Randomness in <code>OreBlockPlacer</code>s","text":"<p>In certain situations, the process of actually placing the block requires a randomness source (e.g. to determine the chance of its block being placed).</p> <p>To keep the ore generation fully deterministic in this case as well, it is recommended to generate a new seed using the supplied <code>RandomSource</code> at the time of vein shape generation. This seed should be passed into the <code>OreBlockPlacer</code> returned for the each block position.</p> <p>Inside the <code>OreBlockPlacer</code>, you can then simply create a new <code>RandomSource</code> using the precomputed seed.</p> Using Randomness in an OreBlockPlacer <pre><code>public class MyVeinGenerator {\n    public Map&lt;BlockPos, OreBlockPlacer&gt; generate(WorldGenLevel level, RandomSource random, GTOreDefinition entry, BlockPos origin) {\n        Map&lt;BlockPos, OreBlockPlacer&gt; generatedBlocks = new Object2ObjectOpenHashMap&lt;&gt;();\n\n        for (BlockPos pos : determineShapePositions()) {\n            final var randomSeed = random.nextLong(); // Fully deterministic regardless of chunk generation order\n            generatedBlocks.put(pos, (access, section) -&gt; placeBlock(access, section, randomSeed, pos, entry));\n        }\n\n        return generatedBlocks;\n    }\n\n    private void placeBlock(BulkSectionAccess level, LevelChunkSection section, long randomSeed, BlockPos pos, GTOreDefinition entry) {\n        RandomSource rand = new XoroshiroRandomSource(randomSeed);\n\n        // ...\n    }\n}\n</code></pre>"},{"location":"Development/General-Topics/Overclocking-And-Parallel-Logic/","title":"How to set up Overclocking and Parallel Logic","text":"<p>To improve its generality, RecipeLogic has been rewritten in GTCEu Modern to support inputs and outputs other than EU, items and fluids.</p> <p>The new <code>RecipeLogic</code> no longer handles overclocked and parallel logic, but instead delegates it to the machine via <code>IRecipeLogicMachine</code>:</p> <pre><code>/**\n * Override it to modify recipe on the fly e.g. applying overclock,\n * change chance, etc\n * \n * @param recipe recipe from detected from GTRecipeType\n * @return modified recipe.\n *         null -- this recipe is unavailable\n */\n@Nullable\nGTRecipe modifyRecipe(GTRecipe recipe);\n</code></pre>"},{"location":"Development/General-Topics/Overclocking-And-Parallel-Logic/#electric-overclocking","title":"Electric Overclocking","text":"<p>In general, a simple electric overclocking can be done this way. For details, see <code>OverclockingLogic</code> and <code>RecipeHelper</code></p> <pre><code>public @Nullable GTRecipe modifyRecipe(GTRecipe recipe) {\n    if (RecipeHelper.getRecipeEUtTier(recipe) &gt; getTier()) {\n        return null;\n    }\n\n    return RecipeHelper.applyOverclock(\n        getDefinition().getOverclockingLogic(), \n        recipe,\n        getMaxVoltage()\n    );\n}\n</code></pre>"},{"location":"Development/General-Topics/Overclocking-And-Parallel-Logic/#parallel-logic","title":"Parallel Logic","text":"<p>Parallel is also not complicated to implement. Let's take the <code>generator</code> as an example</p> <pre><code>public @Nullable GTRecipe modifyRecipe(GTRecipe recipe) {\n    var EUt = RecipeHelper.getOutputEUt(recipe); // get the recipe's EU/t\n\n    if (EUt &gt; 0) {\n        // calculate the max parallel limitation.\n        var maxParallel = (int) (Math.min(\n            energyContainer.getOutputVoltage(),\n            GTValues.V[overclockTier]\n        ) / EUt);\n\n        while (maxParallel &gt; 0) {\n            // copy and apply parallel, it will affect all recipes' contents\n            // and the recipe duration.\n            var copied = recipe.copy(ContentModifier.multiplier(maxParallel));\n\n            // If the machine has enough ingredients, return copied recipe.\n            if (copied.matchRecipe(this)) {\n                copied.duration = copied.duration / maxParallel;\n\n                return copied;\n            }\n\n            // Trying to halve the number of parallelism\n            maxParallel /= 2;\n        }\n    }\n    return null;\n}\n</code></pre>"},{"location":"Development/General-Topics/Tick-Updates/","title":"How to use <code>ITickable</code> / <code>update()</code>","text":"<p>The client update is always present and you can override the <code>clientTick()</code> method, which works just as well as in 1.12.</p> <p>But for the sake of performance, our machines are no longer always in a tickable state.  We introduced <code>ITickSubscription</code> for managed tick logic. Understand the basic concept of subscribing to periodic updates when they are needed, and unsubscribe them when  they are not.</p>"},{"location":"Development/General-Topics/Tick-Updates/#example-implementation","title":"Example implementation","text":"<p>Automatic output of our machine requires periodic output of internal items to an adjacent inventory. But most of the time this logic doesn't need to be executed if any of the following conditions apply:</p> <ul> <li>there is no item inside the machine</li> <li>the automatic output is not set to active</li> <li>there is no adjacent block that can accept the item.</li> </ul> <p>Lets look at how we implement it in <code>QuantumChest</code>.</p> Implementation in <code>QuantumChest</code> <pre><code>@Getter @Persisted @DescSynced\nprotected boolean autoOutputItems;\n@Persisted @DropSaved\nprotected final NotifiableItemStackHandler cache; // inner inventory\nprotected TickableSubscription autoOutputSubs;\nprotected ISubscription exportItemSubs;\n\n// update subscription, subscribe if tick logic subscription is required, unsubscribe otherwise.\nprotected void updateAutoOutputSubscription() {\n    var outputFacing = getOutputFacingItems(); // get output facing\n    if ((isAutoOutputItems() &amp;&amp; !cache.isEmpty()) // inner item non empty\n            &amp;&amp; outputFacing != null // has output facing\n            &amp;&amp; ItemTransferHelper.getItemTransfer(getLevel(), getPos().relative(outputFacing), outputFacing.getOpposite()) != null) { // adjacent block has inventory.\n        autoOutputSubs = subscribeServerTick(autoOutputSubs, this::checkAutoOutput); // subscribe tick logic\n    } else if (autoOutputSubs != null) { // unsubscribe tick logic\n        autoOutputSubs.unsubscribe();\n        autoOutputSubs = null;\n    }\n}\n\n// output to nearby block.\nprotected void checkAutoOutput() {\n    if (getOffsetTimer() % 5 == 0) {\n        if (isAutoOutputItems() &amp;&amp; getOutputFacingItems() != null) {\n            cache.exportToNearby(getOutputFacingItems());\n        }\n        updateAutoOutputSubscription(); // dont foget to check if it's still available\n    }\n}\n\n@Override\npublic void onLoad() {\n    super.onLoad();\n    if (getLevel() instanceof ServerLevel serverLevel) {\n        // you cant call ItemTransferHelper.getItemTransfer while chunk is loading, so lets defer it next tick.\n        serverLevel.getServer().tell(new TickTask(0, this::updateAutoOutputSubscription));\n    }\n    // add a listener to listen the changes of inner inventory. (for ex, if inventory not empty anymore, we may need to unpdate logic)\n    exportItemSubs = cache.addChangedListener(this::updateAutoOutputSubscription);\n}\n\n@Override\npublic void onUnload() {\n    super.onUnload(); //autoOutputSubs will be released automatically when machine unload\n    if (exportItemSubs != null) {  //we should mannually release it.\n        exportItemSubs.unsubscribe();\n        exportItemSubs = null;\n    }\n}\n\n// For any change may affect the logic to invoke updateAutoOutputSubscription at a time\n@Override\npublic void setAutoOutputItems(boolean allow) {\n    this.autoOutputItems = allow;\n    updateAutoOutputSubscription();\n}\n\n@Override\npublic void setOutputFacingItems(Direction outputFacing) {\n    this.outputFacingItems = outputFacing;\n    updateAutoOutputSubscription();\n}\n\n@Override\npublic void onNeighborChanged(Block block, BlockPos fromPos, boolean isMoving) {\n    super.onNeighborChanged(block, fromPos, isMoving);\n    updateAutoOutputSubscription();\n}\n</code></pre> <p>I know the code is a kinda long, but it's for performance, and thanks to the SyncData system, we've eliminated a lot of synchronization code, so please sacrifice a little for better performance.</p>"},{"location":"Development/General-Topics/Tick-Updates/#using-the-conditionalsubscriptionhandler","title":"Using the <code>ConditionalSubscriptionHandler</code>","text":"<p>For ease of use in some situations, it is possible to eliminate some of the boilerplate code and delegate management of your subscription to a <code>ConditionalSubscriptionHandler</code> instead.</p> <p>Using that class, it is possible to simply provide an update method to run every tick while the subscription is active, as well as a <code>Supplier&lt;Boolean&gt;</code> that determines whether it is active.</p> <p>Whenever the input of its condition changes, you need to call <code>updateSubscription()</code> on the handler, so that it can re-evaluate it and take the necessary steps if it has changed. You should also to call this method after executing your tick logic in most cases, to ensure the subscription doesn't stay active any longer than it needs to.</p> Example using <code>ConditionalSubscriptionHandler</code> <pre><code>class MyMachine extends MetaMachine implements IControllable {\n    @Persisted @Getter\n    private boolean workingEnabled = true;\n\n    private final ConditionalSubscriptionHandler subscriptionHandler;\n\n    public MyMachine() {\n        super(/* ... */);\n\n        this.subscriptionHandler = new ConditionalSubscriptionHandler(\n            this, this::update, this::isSubscriptionActive\n        );\n    }\n\n    private void update() {\n        // Only run once every second\n        if (getOffsetTimer() % 20 != 0)\n            return;\n\n        // ...\n\n        // Now that the update logic has been executed, update the subscription.\n        // This will internally check if the subscription is still active and\n        // unsubscribe otherwise.\n        subscriptionHandler.updateSubscription();\n    }\n\n    private boolean isSubscriptionActive() {\n        return isWorkingEnabled();\n    }\n\n    @Override\n    public void setWorkingEnabled(boolean workingEnabled) {\n        this.workingEnabled = workingEnabled;\n\n        // Whether the subscription is currently active depends on whether working\n        // is enabled for this machine. As soon as any of the condition inputs changes,\n        // you need to update the subscription.\n        subscriptionHandler.updateSubscription();\n    }\n\n    @Override\n    public void onLoad() {\n        super.onLoad();\n\n        // As soon as you can get a reference to the dimension/level you're in,\n        // you need to initialize your subscription handler.\n        subscriptionHandler.initialize(getLevel());\n    }\n}\n</code></pre>"},{"location":"Development/SyncData/","title":"LDLib's SyncData System","text":"<p>For serializing and synchronizing fields, LDLib's annotation-based SyncData system is used. Using this system, almost all boilerplate code regarding these topics can be omitted.</p> <p>For more info on the SyncData annotations, please refer to the following chapters, as well as to the LDLib Wiki.</p>"},{"location":"Development/SyncData/Using-SyncData/","title":"How To Use SyncData Annotations","text":"<p>For serializing and synchronizing fields, LDLib's annotation-based SyncData system is used.</p> <p>Please also refer to the LDLib Wiki.</p>"},{"location":"Development/SyncData/Using-SyncData/#overview","title":"Overview","text":"<p>Here is an overview of the most important annotations:</p> <pre><code>public class MyMachine {\n    @Persisted // (1)\n    private String myPersistedField;\n\n    @DescSynced // (2)\n    private String myClientsideRelevantField;\n\n    @DescSynced @RequireRerender // (3)\n    private IO io;\n\n    @DescSynced @UpdateListener(methodName = \"runAdditionalUpdate\") // (4)\n    private int fieldWithAdditionalClientUpdateLogic;\n\n\n    private void runAdditionalUpdate(int newValue, int oldValue) {\n        // Run additional clientside update code here\n    }\n}\n</code></pre> <ol> <li> <p>This field is automatically serialized to and deserialized from NBT data, that will be stored with its container.    By default, <code>@Persisted</code> only applies on the server side.</p> </li> <li> <p>For fields that need to be available on the client (or more specifically, remote) side, you can annotate them with    <code>@DescSynced</code> to make them available there as well.    Any changes made to the field on the server side will automatically be synchronized to the client side.</p> </li> <li> <p>If a change of a synced field's value requires rerendering the containing block (e.g. for different overlays based    on a cover's IO direction), simply add the <code>@RequireRerender</code> annotation to it.    Its renderer's code will then be called again every time the field changes.</p> </li> <li> <p>In some cases, a field may require some additional code to run on the client/remote side when it has been synced.    The <code>@UpdateListener</code> annotation allows you to define a method to be called in that case.</p> </li> </ol>"},{"location":"Development/SyncData/Annotations/DescSynced/","title":"Using <code>@DescSynced</code>","text":""},{"location":"Development/SyncData/Annotations/Persisted/","title":"Using <code>@Persisted</code>","text":""},{"location":"Development/SyncData/Annotations/RequireRerender/","title":"Using <code>@RequireRerender</code>","text":""},{"location":"Development/SyncData/Annotations/UpdateListener/","title":"Using <code>@UpdateListener</code>","text":""},{"location":"Gameplay/","title":"Gameplay Docs","text":""},{"location":"Gameplay/Ore-Generation/","title":"Ore Generation","text":"<p>This is an overview of GTCEu's ore veins and the ore types they contain. Please note that these are the default settings and may be different in certain modpacks.</p>"},{"location":"Gameplay/Ore-Generation/#overworld","title":"Overworld","text":""},{"location":"Gameplay/Ore-Generation/#apatite-vein","title":"Apatite Vein","text":"<ul> <li>Apatite</li> <li>Tricalcium Phosphate</li> <li>Pyrochlore</li> </ul> <p>Height range: 10 to 80</p>"},{"location":"Gameplay/Ore-Generation/#cassiterite-vein","title":"Cassiterite Vein","text":"<ul> <li>Tin</li> <li>Cassiterite</li> </ul> <p>Height range: 10 to 80</p>"},{"location":"Gameplay/Ore-Generation/#coal-vein","title":"Coal Vein","text":"<ul> <li>Coal</li> </ul> <p>Height range: 10 to 140</p>"},{"location":"Gameplay/Ore-Generation/#copper-tin-vein","title":"Copper Tin Vein","text":"<ul> <li>Chalcopyrite</li> <li>Zeolite</li> <li>Cassiterite</li> <li>Realgar</li> </ul> <p>Height range: -10 to 160</p>"},{"location":"Gameplay/Ore-Generation/#galena-vein","title":"Galena Vein","text":"<ul> <li>Galena</li> <li>Silver</li> <li>Lead</li> </ul> <p>Height range: -15 to 45</p>"},{"location":"Gameplay/Ore-Generation/#garnet-tin-vein","title":"Garnet Tin Vein","text":"<ul> <li>Cassiterite Sand</li> <li>Garnet Sand</li> <li>Asbestos</li> <li>Diatomite</li> </ul> <p>Height range: 30 to 60</p>"},{"location":"Gameplay/Ore-Generation/#iron-vein","title":"Iron Vein","text":"<ul> <li>Goethite</li> <li>Yellow Limonite</li> <li>Hematite</li> <li>Malachite</li> </ul> <p>Height range: -10 to 60</p>"},{"location":"Gameplay/Ore-Generation/#lubricant-vein","title":"Lubricant Vein","text":"<ul> <li>Soapstone</li> <li>Talc</li> <li>Glauconite Sand</li> <li>Pentlandite</li> </ul> <p>Height range: 0 to 50</p>"},{"location":"Gameplay/Ore-Generation/#magnetite-vein","title":"Magnetite Vein","text":"<ul> <li>Magnetite</li> <li>Vanadium Magnetite</li> <li>Gold</li> </ul> <p>Height range: 10 to 60</p>"},{"location":"Gameplay/Ore-Generation/#mineral-sand-vein","title":"Mineral Sand Vein","text":"<ul> <li>Basaltic Mineral Sand</li> <li>Granitic Mineral Sand</li> <li>Fuller's Earth</li> <li>Gypsum</li> </ul> <p>Height range: 15 to 60</p>"},{"location":"Gameplay/Ore-Generation/#nickel-vein","title":"Nickel Vein","text":"<ul> <li>Garnierite</li> <li>Nickel</li> <li>Cobaltite</li> <li>Pentlandite</li> </ul> <p>Height range: -10 to 60</p>"},{"location":"Gameplay/Ore-Generation/#salts-vein","title":"Salts Vein","text":"<ul> <li>Rock Salt</li> <li>Salt</li> <li>Lepidolite</li> <li>Spodumene</li> </ul> <p>Height range: 30 to 70</p>"},{"location":"Gameplay/Ore-Generation/#oilsands-vein","title":"Oilsands Vein","text":"<ul> <li>Oilsands</li> </ul> <p>Height range: 30 to 80</p>"},{"location":"Gameplay/Ore-Generation/#copper-vein","title":"Copper Vein","text":"<ul> <li>Chalcopyrite</li> <li>Iron</li> <li>Pyrite</li> <li>Copper</li> </ul> <p>Height range: -40 to 10</p>"},{"location":"Gameplay/Ore-Generation/#diamond-vein","title":"Diamond Vein","text":"<ul> <li>Graphite</li> <li>Diamond</li> <li>Coal</li> </ul> <p>Height range: -65 to -30</p>"},{"location":"Gameplay/Ore-Generation/#lapis-vein","title":"Lapis Vein","text":"<ul> <li>Lazurite</li> <li>Sodalite</li> <li>Lapis</li> <li>Calcite</li> </ul> <p>Height range: -60 to 10</p>"},{"location":"Gameplay/Ore-Generation/#manganese-vein","title":"Manganese Vein","text":"<ul> <li>Grossular</li> <li>Spessartine</li> <li>Pyrolusite</li> <li>Tantalite</li> </ul> <p>Height range: -30 to 0</p>"},{"location":"Gameplay/Ore-Generation/#mica-vein","title":"Mica Vein","text":"<ul> <li>Kyanite</li> <li>Mica</li> <li>Bauxite</li> <li>Pollucite</li> </ul> <p>Height range: -40 to -10</p>"},{"location":"Gameplay/Ore-Generation/#olivine-vein","title":"Olivine Vein","text":"<ul> <li>Bentonite</li> <li>Magnetite</li> <li>Olivine</li> <li>Glauconite Sand</li> </ul> <p>Height range: -20 to 10</p>"},{"location":"Gameplay/Ore-Generation/#redstone-vein","title":"Redstone Vein","text":"<ul> <li>Redstone</li> <li>Ruby</li> <li>Cinnabar</li> </ul> <p>Height range: -65 to -10</p>"},{"location":"Gameplay/Ore-Generation/#sapphire-vein","title":"Sapphire Vein","text":"<ul> <li>Almandine</li> <li>Pyrope</li> <li>Sapphire</li> <li>Green Sapphire</li> </ul> <p>Height range: -40 to 0</p>"},{"location":"Gameplay/Ore-Generation/#nether","title":"Nether","text":""},{"location":"Gameplay/Ore-Generation/#banded-iron-vein","title":"Banded Iron Vein","text":"<ul> <li>Goethite</li> <li>Yellow Limonite</li> <li>Hematite</li> <li>Gold</li> </ul> <p>Height range: 20 to 40</p>"},{"location":"Gameplay/Ore-Generation/#beryllium-vein","title":"Beryllium Vein","text":"<ul> <li>Beryllium</li> <li>Emerald</li> </ul> <p>Height range: 5 to 30</p>"},{"location":"Gameplay/Ore-Generation/#certus-quartz-vein","title":"Certus Quartz Vein","text":"<ul> <li>Quartzite</li> <li>Certus Quartz</li> <li>Barite</li> </ul> <p>Height range: 80 to 120</p>"},{"location":"Gameplay/Ore-Generation/#manganese-vein-nether","title":"Manganese Vein (Nether)","text":"<ul> <li>Grossular</li> <li>Pyrolusite</li> <li>Tantalite</li> </ul> <p>Height range: 20 to 30</p>"},{"location":"Gameplay/Ore-Generation/#molybdenum-vein","title":"Molybdenum Vein","text":"<ul> <li>Wulfenite</li> <li>Molybdenite</li> <li>Molybdenum</li> <li>Powellite</li> </ul> <p>Height range: 20 to 50</p>"},{"location":"Gameplay/Ore-Generation/#monazite-vein","title":"Monazite Vein","text":"<ul> <li>Bastnasite</li> <li>Molybdenum</li> <li>Neodymium</li> </ul> <p>Height range: 20 to 40</p>"},{"location":"Gameplay/Ore-Generation/#nether-quartz-vein","title":"Nether Quartz Vein","text":"<ul> <li>Nether Quartz</li> <li>Quartzite</li> </ul> <p>Height range: 40 to 80</p>"},{"location":"Gameplay/Ore-Generation/#redstone-vein-nether","title":"Redstone Vein (Nether)","text":"<ul> <li>Redstone</li> <li>Ruby</li> <li>Cinnabar</li> </ul> <p>Height range: 5 to 40</p>"},{"location":"Gameplay/Ore-Generation/#saltpeter-vein","title":"Saltpeter Vein","text":"<ul> <li>Saltpeter</li> <li>Diatomite</li> <li>Electrotine</li> <li>Alunite</li> </ul> <p>Height range: 5 to 45</p>"},{"location":"Gameplay/Ore-Generation/#sulfur-vein","title":"Sulfur Vein","text":"<ul> <li>Sulfur</li> <li>Pyrite</li> <li>Sphalerite</li> </ul> <p>Height range: 10 to 30</p>"},{"location":"Gameplay/Ore-Generation/#tetrahedryte-vein","title":"Tetrahedryte Vein","text":"<ul> <li>Tetrahedryte</li> <li>Copper</li> <li>Stibnite</li> </ul> <p>Height range: 80 to 120</p>"},{"location":"Gameplay/Ore-Generation/#topaz-vein","title":"Topaz Vein","text":"<ul> <li>Blue Topaz</li> <li>Topaz</li> <li>Chalcocite</li> <li>Bornite</li> </ul> <p>Height range: 80 to 120</p>"},{"location":"Gameplay/Ore-Generation/#the-end","title":"The End","text":""},{"location":"Gameplay/Ore-Generation/#bauxite-vein","title":"Bauxite Vein","text":"<ul> <li>Bauxite</li> <li>Ilmenite</li> <li>Aluminium</li> </ul> <p>Height range: 10 to 80</p>"},{"location":"Gameplay/Ore-Generation/#magnetite-vein-the-end","title":"Magnetite Vein (The End)","text":"<ul> <li>Magnetite</li> <li>Vanadium Magnetite</li> <li>Chromite</li> <li>Gold</li> </ul> <p>Height range: 20 to 80</p>"},{"location":"Gameplay/Ore-Generation/#naquadah-vein","title":"Naquadah Vein","text":"<ul> <li>Naquadah</li> <li>Plutonium 239</li> </ul> <p>Height range: 10 to 90</p>"},{"location":"Gameplay/Ore-Generation/#pitchblende-vein","title":"Pitchblende Vein","text":"<ul> <li>Pitchblende</li> <li>Uraninite</li> </ul> <p>Height range: 30 to 60</p>"},{"location":"Gameplay/Ore-Generation/#scheelite-vein","title":"Scheelite Vein","text":"<ul> <li>Scheelite</li> <li>Tungstate</li> <li>Lithium</li> </ul> <p>Height range: 20 to 60</p>"},{"location":"Gameplay/Ore-Generation/#sheldonite-vein","title":"Sheldonite Vein","text":"<ul> <li>Bornite</li> <li>Cooperite</li> <li>Platinum</li> <li>Palladium</li> </ul> <p>Height range: 5 to 50</p>"},{"location":"Gameplay/Steam/","title":"Welcome to Gregtech","text":"<p>Steam is the first of many stages that come with the Gregtech mod. It will be your first encounter with GT machines and tools. Be careful things may get explosive.</p> <p>So it is important that you learn how to transport and make enough steam for your factory.</p>"},{"location":"Gameplay/Steam/#in-this-tier","title":"In this tier","text":"<p>Most important material: Bronze</p> <p>End Goal: LV machine hull</p> <p>Gated by: Primitive blast furnace</p>"},{"location":"Gameplay/Steam/Bronze/","title":"Bronze","text":"<p>Bronze is the most important material in the Steam Age. </p> <p>To prepare the first batch of it you will need Tin and Copper just crush the ingots with a GT mortar. And then mix them in a crafting table in 3 to 1 proportion. Then smelting to receive the ingot.</p> <p> </p>"},{"location":"Gameplay/Steam/Steam-Generation/","title":"Generating Steam","text":""},{"location":"Gameplay/Steam/Steam-Generation/#early-game","title":"Early game","text":"<p>For early game steam generation you have two options:</p>"},{"location":"Gameplay/Steam/Steam-Generation/#boilers","title":"Boilers","text":"<ul> <li>Liquid - allowing you to use hot liquids like lava. To heat up water and get steam.</li> <li>Solid - uses coal to heat up the water.</li> </ul>"},{"location":"Gameplay/Steam/Steam-Generation/#solar-boilers","title":"Solar Boilers","text":"<ul> <li>generate steam from solar boilers doesn't work at night.</li> </ul> <p>For water you can use a primitive pump </p> <p>or use a water connection from any other mod.</p>"},{"location":"Gameplay/Steam/Steam-Generation/#after-steel","title":"After Steel","text":"<p>After unlocking steel (using a primitive blast furnace) you will get access to the high pressure versions of the boilers and allow you to produce more steam.</p>"},{"location":"Gameplay/Steam/Steam-Generation/#large-boilers","title":"Large Boilers","text":"<p>Large boilers allow you to create massive amount of steam in the blink of an eye. A boiler can be constructed of many different GT materials, that will allow for different steam generation rates (consult the table below).</p>"},{"location":"Gameplay/Steam/Steam-Generation/#base-generation-rates","title":"Base Generation Rates","text":""},{"location":"Gameplay/Steam/Steam-Generation/#single-block","title":"Single Block","text":"Boiler type Low pressure High pressure Solar 6 L/T 18 L/T Liquid 12 L/T 30 L/T Solid 6 L/T 15 L/T"},{"location":"Gameplay/Steam/Steam-Generation/#multiblock","title":"Multiblock","text":"Boiler Generation Boil up Max temp Bronze 800 L/T 40s 1074K Steel 1800 L/T 90s 2074K Titanium 3200 L/T 160s 3474K Tungstensteel 6400 L/T 160s 6674K <p>*L/T -&gt; Liters per tick (1L = 1mB)</p>"},{"location":"Modpacks/","title":"Modpack Creation","text":"<p>GTCEu Modern offers extensive integration with KubeJS for customizability. Most of our tools for modpack creators revolve around this KubeJS API.</p> <p>Refer to this section for information on how to use it, as well as for examples.</p>"},{"location":"Modpacks/#general-notes","title":"General Notes","text":"<p>Sometimes, calling a specific method is always required when adding (or modifying) something. These methods are marked with <code>// [*]</code> in the docs, like in the following example:</p> <pre><code>ServerEvents.exampleEvent(event =&gt; {\n    event.create('example', builder =&gt; {\n        builder.requiredMethod(42) // [*] (1)\n        builder.otherRequiredMethod(42) // [*]\n\n        builder.optionalMethod() // (2)\n    })\n})\n</code></pre> <ol> <li>These methods are required</li> <li>This method is optional and doesn't have to be called in all cases</li> </ol>"},{"location":"Modpacks/#beyond-the-docs","title":"Beyond the Docs","text":"<p>While we try to keep this documentation up to date and as complete as possible, it may not always contain all of the latest information.</p> <p>Please also check the Beyond the Docs page for additional references.</p>"},{"location":"Modpacks/Beyond-The-Docs/","title":"Beyond the Docs","text":"<p>While we try to keep this documentation up to date and as complete as possible, it may not always contain all of the latest information.</p> <p>As an additional resource to these docs, you can also reference our KubeJS integration directly in the source code: <code>src/main/java/com/gregtechceu/gtceu/integration/kjs</code></p> <p>Continue reading for a few important places you may want to check.</p>"},{"location":"Modpacks/Beyond-The-Docs/#builders","title":"Builders","text":"<p>Builders</p> <p><code>src/main/java/com/gregtechceu/gtceu/integration/kjs/builders</code></p> <p>If you're not sure what methods and fields are available on one of our builders, you can find all of them in this directory.</p>"},{"location":"Modpacks/Beyond-The-Docs/#material-builder","title":"Material Builder","text":"<p>Material Builder</p> <p><code>src/main/java/com/gregtechceu/gtceu/api/data/chemical/material/Material.java</code></p> <p>The material builder is not located in the KJS integration package. Please reference the nested <code>Material.Builder</code> class instead.</p>"},{"location":"Modpacks/Beyond-The-Docs/#bindings-type-wrappers","title":"Bindings &amp; Type Wrappers","text":"<p>GregTechKubeJSPlugin</p> <p><code>src/main/java/com/gregtechceu/gtceu/integration/kjs/GregTechKubeJSPlugin.java</code></p> <ul> <li>For a list of our custom bindings, see <code>GregTechKubeJSPlugin.registerBindings()</code></li> <li>For a list of our type wrappers and their accepted inputs, see <code>GregTechKubeJSPlugin.registerTypeWrappers()</code></li> </ul>"},{"location":"Modpacks/Changes/v1.1.0/","title":"Updating from <code>1.0.x</code> to <code>1.1.0</code>","text":""},{"location":"Modpacks/Changes/v1.1.0/#circuit-item-tags","title":"Circuit Item Tags","text":"<p>Item tags for circuits have been changed from <code>#forge:circuits/&lt;tier&gt;</code> to <code>#gtceu:circuits/&lt;tier&gt;</code>. You will need to update any recipes accordingly.</p>"},{"location":"Modpacks/Changes/v1.1.0/#recipe-id-changes","title":"Recipe ID Changes","text":"<p>Several recipe IDs have changed. If you are removing/modifying any recipes by ID, please check if they are still valid.</p>"},{"location":"Modpacks/Changes/v1.1.0/#ore-stone-types","title":"Ore Stone Types","text":"<p>Due to changes in how ores are rendered, ore stone types will now additionally require a base model location:</p> <pre><code>e.create('my_ore', 'ore')\n    .baseModelLocation('some_other_mod:block/my_block')\n    //...\n</code></pre>"},{"location":"Modpacks/Changes/v1.2.1/","title":"Updating from <code>1.2.0</code> to <code>1.2.1</code>","text":""},{"location":"Modpacks/Changes/v1.2.1/#custom-coils","title":"Custom Coils","text":"<p>The <code>coilMaterial</code> function now uses a supplier instead of taking a material directly.</p> <pre><code>// Before:\n.coilMaterial(GTMaterials.get('infinity'))\n\n// After:\n.coilMaterial(() =&gt; GTMaterials.get('infinity'))\n</code></pre>"},{"location":"Modpacks/Changes/v1.2.1/#recipe-modifiers","title":"Recipe Modifiers","text":"<p>If any of your machines had a custom recipe modifier, its syntax has changed slightly.</p> <p>More than one recipe modifier can now be applied, making more complex chains of modifiers easier to declare. In particular, multiblocks supporting parallel hatches now need to be declared differently:</p> <p><pre><code>// Before:\n.recipeModifier(GTRecipeModifiers.PARALLEL_HATCH.apply(OverclockingLogic.PERFECT_OVERCLOCK, GTRecipeModifiers.ELECTRIC_OVERCLOCK))\n\n// After:\n.recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK)])\n</code></pre> Recipe modifiers must be supplied as a JavaScript array, as this is what Rhino transpiles into a varargs (<code>RecipeModifier...</code>) value, which is what the <code>.recipeModifiers()</code> method accepts as input. If not supplied as an array, Rhino with throw an exception and crash Minecraft.</p>"},{"location":"Modpacks/Changes/v1.2.1/#bedrock-ores","title":"Bedrock Ores","text":"<p>Bedrock ore veins are no longer automatically generated. They are now entirely up to modpack developers to define, and offer more flexibility than the previous system.</p> <pre><code>GTCEuServerEvents.oreVeins(event =&gt; {\n    event.add('kubejs:my_custom_bedrock_vein', vein =&gt; {\n        // ...\n    })\n    event.modify('kubejs:other_custom_vein', vein =&gt; {\n        // ...\n    })\n    event.remove('kubejs:other_custom_vein')\n})\n</code></pre> <p>The documentation for how to use the add and modify events will follow soon. For now, please reference the <code>BedrockOreDefinition.Builder</code> class in our source code.</p>"},{"location":"Modpacks/Examples/","title":"Examples","text":"<p>This sections contains several examples you can use and adapt for your own modpack.</p>"},{"location":"Modpacks/Examples/Alternator/","title":"Alternator","text":""},{"location":"Modpacks/Examples/Alternator/#alternator-multiblock-by-drackion","title":"Alternator Multiblock (by Drack.ion)","text":""},{"location":"Modpacks/Examples/Alternator/#recipe-type","title":"Recipe Type","text":"alternator_recipe_type.js<pre><code>GTCEuStartupEvents.registry('gtceu:recipe_type', event =&gt; {\n    event.create('basic_alternator')\n        .category('multiblock')\n        .setEUIO('out')\n            .setMaxIOSize(1, 0, 0, 0)\n        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)\n        .setSound(GTSoundEntries.ARC)\n        .setMaxTooltips(6)\n})\n</code></pre>"},{"location":"Modpacks/Examples/Alternator/#multiblock","title":"Multiblock","text":"alternator_multiblock.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('basic_alternator', 'multiblock')\n        .rotationState(RotationState.NON_Y_AXIS)\n        .recipeType('basic_alternator')\n        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)\n        .generator(true)\n        .pattern(definition =&gt; FactoryBlockPattern.start()\n            .aisle(\"CWC\", \"CWC\", \"#W#\")\n            .aisle(\"CWC\", \"K#E\", \"CWC\")\n            .aisle(\"CWC\", \"CWA\", \"#W#\")\n            .where('A', Predicates.controller(Predicates.blocks(definition.get())))\n            .where('W', Predicates.blocks(GTBlocks.COIL_CUPRONICKEL.get()))\n            .where(\"C\", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get()))\n            .where('#', Predicates.any())\n            .where('K', Predicates.abilities(PartAbility.INPUT_KINETIC).setExactLimit(1))\n            .where('E', Predicates.abilities(PartAbility.OUTPUT_ENERGY).setExactLimit(1))\n            .build()\n        )\n        .workableCasingRenderer(\n            \"gtceu:block/casings/solid/machine_casing_solid_steel\",\n            \"gtceu:block/multiblock/implosion_compressor\", false\n        )\n})\n</code></pre>"},{"location":"Modpacks/Examples/Alternator/#lang","title":"Lang","text":"en_us.json<pre><code>{\n    \"block.gtceu.basic_alternator\": \"Basic Alternator\",\n    \"gtceu.basic_alternator\": \"Basic Alternator\"\n}\n</code></pre>"},{"location":"Modpacks/Examples/Alternator/#recipes","title":"Recipes","text":"alternator_recipes.js<pre><code>ServerEvents.recipes(event =&gt; {\n    function basic_alt(id, rpm, eu){\n        event.recipes.gtceu.basic_alternator(id)\n            .circuit(1)\n            .rpm(rpm)\n            .duration(2)\n            .EUt(eu)\n    }\n    basic_alt('lv_1_amp', 32, -32)\n})\n</code></pre>"},{"location":"Modpacks/Examples/Greenhouse/","title":"Greenhouse Multiblock (by Drack.ion)","text":""},{"location":"Modpacks/Examples/Greenhouse/#recipe-type","title":"Recipe Type","text":"greenhouse_recipe_type.js<pre><code>GTCEuStartupEvents.registry('gtceu:recipe_type', event =&gt; {\n    event.create('greenhouse')\n        .category('drack')\n        .setEUIO('in')\n        .setMaxIOSize(3, 4, 1, 0)\n        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)\n        .setSound(GTSoundEntries.BATH)\n})\n</code></pre>"},{"location":"Modpacks/Examples/Greenhouse/#multiblock","title":"Multiblock","text":"greenhouse_multiblock.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('greenhouse', 'multiblock')\n        .rotationState(RotationState.NON_Y_AXIS)\n        .recipeType('greenhouse')\n        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)\n        .pattern(definition =&gt; FactoryBlockPattern.start()\n            .aisle('CCC', 'CGC', 'CGC', 'CLC', 'CCC')\n            .aisle('CMC', 'GSG', 'G#G', 'LIL', 'COC')\n            .aisle('CKC', 'CGC', 'CGC', 'CLC', 'CNC')\n            .where('K', Predicates.controller(Predicates.blocks(definition.get())))\n            .where('M', Predicates.blocks('moss_block')\n                .or(Predicates.blocks('dirt'))\n                .or(Predicates.blocks('grass_block'))\n            )\n            .where('G', Predicates.blocks('ae2:quartz_glass'))\n            .where('S', Predicates.blocks('oak_sapling')\n                .or(Predicates.blocks('dark_oak_sapling'))\n                .or(Predicates.blocks('spruce_sapling'))\n                .or(Predicates.blocks('birch_sapling'))\n                .or(Predicates.blocks('jungle_sapling'))\n                .or(Predicates.blocks('acacia_sapling'))\n                .or(Predicates.blocks('azalea'))\n                .or(Predicates.blocks('flowering_azalea'))\n                .or(Predicates.blocks('mangrove_propagule'))\n                .or(Predicates.blocks('gtceu:rubber_sapling'))\n            )\n            .where('I', Predicates.blocks('glowstone'))\n            .where('L', Predicates.blocks(GTBlocks.CASING_GRATE.get()))\n            .where('C', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())\n                .or(Predicates.autoAbilities(definition.getRecipeTypes()))\n            )\n            .where('O', Predicates.abilities(PartAbility.MUFFLER)\n                .setExactLimit(1)\n            )\n            .where('N', Predicates.abilities(PartAbility.MAINTENANCE))\n            .where('#', Predicates.air())\n            .build()\n        )\n        .workableCasingRenderer('gtceu:block/casings/solid/machine_casing_solid_steel', 'gtceu:block/multiblock/implosion_compressor', false)\n})\n</code></pre>"},{"location":"Modpacks/Examples/Greenhouse/#lang","title":"Lang","text":"en_us.json<pre><code>{\n    \"block.gtceu.greenhouse\": \"Greenhouse\",\n    \"gtceu.greenhouse\": \"Greenhouse\"\n}\n</code></pre>"},{"location":"Modpacks/Examples/Greenhouse/#recipes","title":"Recipes","text":"greenhouse_recipes.js<pre><code>ServerEvents.recipes(event =&gt; {\n\n    ////// Machine Recipe //////\n\n    event.shaped(\n        'gtceu:greenhouse',\n        ['AWA', 'CSC', 'WCW'],\n        {\n            A: '#forge:circuits/mv',\n            W: 'gtceu:copper_single_cable',\n            C: '#forge:circuits/mv',\n            S: 'gtceu:solid_machine_casing'\n        }\n    ).id('gtceu:shaped/greenhouse')\n\n\n    ////// Greenhouse Recipes //////\n\n    function Greenhouse(id, input, fluid, output, boosted) {\n        if (boosted) {\n            event.recipes.gtceu.greenhouse(id)\n                .circuit(2)\n                .notConsumable(InputItem.of(input))\n                .itemInputs('4x gtceu:fertilizer')\n                .inputFluids(Fluid.of('minecraft:water', fluid))\n                .itemOutputs(output)\n                .duration(320)\n                .EUt(MV)\n        } else {\n            event.recipes.gtceu.greenhouse(id)\n                .circuit(1)\n                .notConsumable(InputItem.of(input))\n                .inputFluids(Fluid.of('minecraft:water', fluid))\n                .itemOutputs(output)\n                .duration(640)\n                .EUt(MV)\n        }\n    }\n\n\n    ////// Trees //////\n\n    // Rubber\n    Greenhouse('rubber_sapling', 'gtceu:rubber_sapling', 1000, ['32x gtceu:rubber_log', '8x gtceu:sticky_resin', '4x gtceu:rubber_sapling'], false)\n    Greenhouse('rubber_sapling_boosted', 'gtceu:rubber_sapling', 1000, ['64x gtceu:rubber_log', '16x gtceu:sticky_resin', '4x gtceu:rubber_sapling'], true)\n\n    // Oak\n    Greenhouse('oak_sapling', 'minecraft:oak_sapling', 1000, ['64x minecraft:oak_log', '4x minecraft:oak_sapling'], false)\n    Greenhouse('oak_sapling_boosted', 'minecraft:oak_sapling', 1000, ['64x minecraft:oak_log', '64x minecraft:oak_log', '4x minecraft:oak_sapling'], true)\n\n    // Dark Oak\n    Greenhouse('dark_oak_sapling', 'minecraft:dark_oak_sapling', 1000, ['64x minecraft:dark_oak_log', '4x minecraft:dark_oak_sapling'], false)\n    Greenhouse('dark_oak_sapling_boosted', 'minecraft:dark_oak_sapling', 1000, ['64x minecraft:dark_oak_log', '64x minecraft:dark_oak_log', '4x minecraft:dark_oak_sapling'], true)\n\n    // Spruce\n    Greenhouse('spruce_sapling', 'minecraft:spruce_sapling', 1000, ['64x minecraft:spruce_log', '4x minecraft:spruce_sapling'], false)\n    Greenhouse('spruce_sapling_boosted', 'minecraft:spruce_sapling', 1000, ['64x minecraft:spruce_log', '64x minecraft:spruce_log', '4x minecraft:spruce_sapling'], true)\n\n    // Birch\n    Greenhouse('birch_sapling', 'minecraft:birch_sapling', 1000, ['64x minecraft:birch_log', '4x minecraft:birch_sapling'], false)\n    Greenhouse('birch_sapling_boosted', 'minecraft:birch_sapling', 1000, ['64x minecraft:birch_log', '64x minecraft:birch_log', '4x minecraft:birch_sapling'], true)\n\n    // Acacia\n    Greenhouse('acacia_sapling', 'minecraft:acacia_sapling', 1000, ['64x minecraft:acacia_log', '4x minecraft:acacia_sapling'], false)\n    Greenhouse('acacia_sapling_boosted', 'minecraft:acacia_sapling', 1000, ['64x minecraft:acacia_log', '64x minecraft:acacia_log', '4x minecraft:acacia_sapling'], true)\n\n    // Jungle\n    Greenhouse('jungle_sapling', 'minecraft:jungle_sapling', 1000, ['64x minecraft:jungle_log', '4x minecraft:jungle_sapling'], false)\n    Greenhouse('jungle_sapling_boosted', 'minecraft:jungle_sapling', 1000, ['64x minecraft:jungle_log', '64x minecraft:jungle_log', '4x minecraft:jungle_sapling'], true)\n\n    // Azalea\n    Greenhouse('azalea_sapling', 'minecraft:azalea', 1000, ['64x minecraft:oak_log', '4x minecraft:azalea'], false)\n    Greenhouse('azalea_boosted', 'minecraft:azalea', 1000, ['64x minecraft:oak_log', '64x minecraft:oak_log', '4x minecraft:azalea'], true)\n\n    // Flowering Azalea\n    Greenhouse('flowering_azalea', 'minecraft:flowering_azalea', 1000, ['64x minecraft:oak_log', '4x minecraft:flowering_azalea'], false)\n    Greenhouse('flowering_azalea_boosted', 'minecraft:flowering_azalea', 1000, ['64x minecraft:oak_log', '64x minecraft:oak_log', '4x minecraft:flowering_azalea'], true)\n\n    // Mangrove\n    Greenhouse('mangrove_propagule', 'minecraft:mangrove_propagule', 1000, ['64x minecraft:mangrove_log', '4x minecraft:mangrove_propagule'], false)\n    Greenhouse('mangrove_propagule_boosted', 'minecraft:mangrove_propagule', 1000, ['64x minecraft:mangrove_log', '64x minecraft:mangrove_log', '4x minecraft:mangrove_propagule'], true)\n\n    ////// Crops //////\n\n    // Sugarcane\n    Greenhouse('sugar_cane', 'minecraft:sugar_cane', 1000, '24x minecraft:sugar_cane', false)\n    Greenhouse('sugar_cane_boosted', 'minecraft:sugar_cane', 1000, '48x minecraft:sugar_cane', true)\n\n    // Kelp\n    Greenhouse('kelp', 'minecraft:kelp', 2000, '24x minecraft:kelp', false)\n    Greenhouse('kelp_boosted', 'minecraft:kelp', 2000, '48x minecraft:kelp', true)\n\n    // Bamboo\n    Greenhouse('bamboo', 'minecraft:bamboo', 1000, '24x minecraft:bamboo', false)\n    Greenhouse('bamboo_boosted', 'minecraft:bamboo', 1000, '48x minecraft:bamboo', true)\n\n    // Cactus\n    Greenhouse('cactus', 'minecraft:cactus', 1000, '24x minecraft:cactus', false)\n    Greenhouse('cactus_boosted', 'minecraft:cactus', 1000, '48x minecraft:cactus', true)\n\n    // Wheat\n    Greenhouse('wheat', 'minecraft:wheat_seeds', 1000, '24x minecraft:wheat', false)\n    Greenhouse('wheat_boosted', 'minecraft:wheat_seeds', 1000, '48x minecraft:wheat', true)\n\n    // Carrot\n    Greenhouse('carrot', 'minecraft:carrot', 1000, '24x minecraft:carrot', false)\n    Greenhouse('carrot_boosted', 'minecraft:carrot', 1000, '48x minecraft:carrot', true)\n\n    // Potato\n    Greenhouse('potato', 'minecraft:potato', 1000, '24x minecraft:potato', false)\n    Greenhouse('potato_boosted', 'minecraft:potato', 1000, '48x minecraft:potato', true)\n\n    // Beetroot\n    Greenhouse('beetroot', 'minecraft:beetroot_seeds', 1000, '24x minecraft:beetroot', false)\n    Greenhouse('beetroot_boosted', 'minecraft:beetroot_seeds', 1000, '48x minecraft:beetroot', true)\n\n    // Mellon\n    Greenhouse('melon', 'minecraft:melon_seeds', 1000, '12x minecraft:melon', false)\n    Greenhouse('melon_boosted', 'minecraft:melon_seeds', 1000, '24x minecraft:melon', true)\n\n    // Pumpkin\n    Greenhouse('pumpkin', 'minecraft:pumpkin_seeds', 1000, '12x minecraft:pumpkin', false)\n    Greenhouse('pumpkin_boosted', 'minecraft:pumpkin_seeds', 1000, '24x minecraft:pumpkin', true)\n\n    // Nether Wart\n    Greenhouse('nether_wart', 'minecraft:nether_wart', 1000, '12x minecraft:nether_wart', false)\n    Greenhouse('nether_wart_boosted', 'minecraft:nether_wart', 1000, '24x minecraft:nether_wart', true)\n\n    // Red Mushroom\n    Greenhouse('red_mushroom', 'minecraft:red_mushroom', 1000, '12x minecraft:red_mushroom', false)\n    Greenhouse('red_mushroom_boosted', 'minecraft:red_mushroom', 1000, '24x minecraft:red_mushroom', true)\n\n    // Brown Mushroom\n    Greenhouse('brown_mushroom', 'minecraft:brown_mushroom', 1000, '12x minecraft:brown_mushroom', false)\n    Greenhouse('brown_mushroom_boosted', 'minecraft:brown_mushroom', 1000, '24x minecraft:brown_mushroom', true)\n})\n</code></pre>"},{"location":"Modpacks/Examples/Ore-Processing-Plant/","title":"Ore Processing Plant Multiblock (by trulyno)","text":""},{"location":"Modpacks/Examples/Ore-Processing-Plant/#recipe-type","title":"Recipe Type","text":"ore_processing_plant.js<pre><code>GTCEuStartupEvents.registry('gtceu:recipe_type', event =&gt; {\n    event.create('ore_processing_plant')\n        .category('ore_processing_plant')\n        .setEUIO('in')\n        .setMaxIOSize(1, 8, 2, 1)\n        .setSound(GTSoundEntries.BATH);\n});\n</code></pre>"},{"location":"Modpacks/Examples/Ore-Processing-Plant/#multiblock","title":"Multiblock","text":"ore_processing_plant.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('ore_processing_plant', 'multiblock')\n        .rotationState(RotationState.NON_Y_AXIS)\n        .recipeType('ore_processing_plant')\n        .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK))\n        .appearanceBlock(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)\n        .pattern(definition =&gt; FactoryBlockPattern.start()\n            .aisle(' AAA ', ' FFF ', ' FFF ', '  F  ', '     ', '     ', '     ')\n            .aisle('AFFFA', 'FG GF', 'F   F', ' F F ', ' FFF ', '  F  ', '  B  ')\n            .aisle('AFFFA', 'F P F', 'F P F', 'F P F', ' FPF ', ' FMF ', ' B B ')\n            .aisle('AFFFA', 'FG GF', 'F   F', ' F F ', ' FFF ', '  F  ', '  B  ')\n            .aisle(' AAA ', ' FCF ', ' FFF ', '  F  ', '     ', '     ', '     ')\n            .where('C', Predicates.controller(Predicates.blocks(definition.get())))\n            .where('F', Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())\n                .or(Predicates.autoAbilities(definition.getRecipeTypes()))\n                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))\n                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))\n            .where('M', Predicates.abilities(PartAbility.MUFFLER))\n            .where('P', Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))\n            .where('G', Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))\n            .where('A', Predicates.blocks(GTBlocks.FIREBOX_TUNGSTENSTEEL.get()))\n            .where('B', Predicates.blocks('gtceu:bronze_machine_casing'))\n            .where(' ', Predicates.any())\n            .build())\n        .workableCasingRenderer(\"gtceu:block/casings/solid/machine_casing_robust_tungstensteel\",\n        \"gtceu:block/multiblock/primitive_blast_furnace\", false);\n    })\n</code></pre>"},{"location":"Modpacks/Examples/Ore-Processing-Plant/#lang","title":"Lang","text":"en_us.json<pre><code>{\n    \"block.gtceu.ore_processing_plant\": \"Ore Processing Plant\",\n    \"gtceu.ore_processing_plant\": \"Ore Processing\"\n}\n</code></pre>"},{"location":"Modpacks/Examples/Parallel-Hatch-Part/","title":"Custom Parallel Hatch Multi-Part (By Sparked)","text":""},{"location":"Modpacks/Examples/Parallel-Hatch-Part/#parallel-hatch","title":"Parallel Hatch","text":"extra_parallel_hatch.js<pre><code>const $ParallelHatchPartMachine = Java.loadClass(\n    'com.gregtechceu.gtceu.common.machine.multiblock.part.ParallelHatchPartMachine'\n) // (1)\n\nGTCEuStartupEvents.registry('gtceu:machine', event =&gt; { // (2)\n    event.create(\n        \"uhv_parallel_hatch\", // (3)\n        \"custom\",\n        (holder, tier) =&gt; {\n            return new $ParallelHatchPartMachine(holder, tier);\n        },\n        GTValues.UHV // (4)\n    )\n    .abilities(PartAbility.PARALLEL_HATCH) // (5)\n    .workableTieredHullRenderer(GTCEu.id(\"block/machines/parallel_hatch_mk4\")) // (6)\n})\n</code></pre> <ol> <li>Loading the java class that is required to build the parallel hatch multi part</li> <li>Using the GT registry event to register the multi part, which is part of machine registry</li> <li>The ID for the new parallel hatch</li> <li>The tier used for the parallel hatch</li> <li>Specifying the multipart to use parallel hatch ability</li> <li>The texture to use for the multipart, this example just uses the t4 texture as a placeholder     You can look at gtm's assets to see the animations and textures to edit</li> </ol>"},{"location":"Modpacks/Examples/Reducing-Duration/","title":"Reducing Duration Of All Machine Recipes","text":""},{"location":"Modpacks/Examples/Reducing-Duration/#reducing-script","title":"Reducing Script","text":"Reduce_Duration.js<pre><code>ServerEvents.recipes(event =&gt; {\n    event.forEachRecipe({ mod: 'gtceu' }, recipe =&gt; { // (1)\n        try { // (2)\n            var newDuration = recipe.get(\"duration\") // (3)\n            recipe.set(\"duration\", newDuration/10) // (4)\n        } catch (err) { // (5)\n            console.log(recipe.id + \" has no duration field, skipped.\")\n        }\n    })\n})\n</code></pre> <ol> <li>A function to run code for every recipe in gregtech.</li> <li>Uses a try to avoid using recipes that don't have a duration, like crafting.</li> <li>Gets a variable of the duration current duration to change.</li> <li>Edits the recipes duration to a tenth of the old recipes duration.</li> <li>Catches the error if the recipe has no duration and logs it.</li> </ol>"},{"location":"Modpacks/Examples/Removing-Ore-Piles/","title":"Removing Surface Ore Indicators","text":""},{"location":"Modpacks/Examples/Removing-Ore-Piles/#removal-script","title":"Removal Script","text":"remove_piles.js<pre><code>GTCEuServerEvents.oreVeins(event =&gt; {\n    event.modifyAll((veinId, vein) =&gt; {\n        vein.surfaceIndicatorGenerator(indicator =&gt; indicator\n            .block(Block.getBlock(\"minecraft:air\")) // (1)\n            .placement(\"above\")\n            .density(0.4) // Unsure if this matters\n            .radius(5) // Unsure if this matters\n        )\n    })\n})\n</code></pre> <ol> <li>Replacing where a ore pile would be with an air block, essentially removing it.</li> </ol>"},{"location":"Modpacks/Materials-and-Elements/","title":"Materials &amp; Elements","text":"<p>GregTech has its own material system based on chemical elements.</p> <p>Materials are composed of chemical elements and/or other materials. Each material can have different items (and blocks), such as ingots, dusts, plates, wires, ores, etc.</p>"},{"location":"Modpacks/Materials-and-Elements/#a-note-about-registration","title":"A note about registration","text":"<p>Order matters when you are registering a new material. If you reference a material by <code>.components()</code>, you must make sure the other material(s) have been created before the current one.</p>"},{"location":"Modpacks/Materials-and-Elements/01-Material-Creation/","title":"Material Creation","text":"<p>Materials are in-game items or fluids. They can be dusts, ingots, gems, fluids and all their derivatives. To make a new material, write an <code>event.create()</code> call in the registering function, like in the examples. Write inside the parentheses the name of the material inside <code>''</code> or <code>\"\"</code>. (NOTE: to add a material that is present on the periodic table, but doesn't have any in-game items/fluids, look below for how to do it)</p> <p>You can change the properties of the material by adding any combination of the following calls:</p> <ul> <li><code>.ingot()</code> will make the material have both an ingot and dust form.</li> <li><code>.dust()</code> will make the material have a dust form. Don't use this together with <code>.ingot()</code>.</li> <li><code>.gem()</code> will make the material have both a gem form and a dust form. Don't use those together with <code>.dust()</code> or <code>.ingot()</code></li> <li><code>.liquid()</code> will make the material have a liquid (fluid) form with liquid properties.</li> <li><code>.gas()</code> will make the material have a gas (fluid) form with gas properties.</li> <li><code>.plasma()</code> will make the material have a plasma (fluid) form with plasma properties.</li> <li><code>.polymer()</code> will make the material have a dust form with polymer properties.</li> <li><code>.burnTime(int burnTime)</code> will turn the material into a furnace fuel.</li> <li><code>.fluidBurnTime(int burnTime)</code> defines how long the fluid of the material will burn.</li> <li><code>.components(component1, component2, ...)</code> describes the composition. The components are a list of elements of the following form: <code>'Kx material_name'</code>, where <code>K</code> is a positive integer.</li> <li><code>.iconSet(set)</code> gives the material an icon set.</li> <li><code>.color(int colorCode)</code> gives the material a color. The color must be provided as a hex value in the following form: <code>0xNNNNNN</code>, where <code>N</code> are digits.</li> <li><code>.secondaryColor(int colorCode)</code> gives the material a secondary color. If this is not being called, the secondary value will default to white(0xffffff).</li> <li><code>.flags(flag1, flag2, ...)</code> can be used to select certain properties of the material, like generating gears, or disabling decomposition.</li> <li><code>.element(element)</code> -&gt; similar to <code>.components()</code>, but is used when the material represents an element.</li> <li><code>.rotorStats(speed, damage, durability)</code> -&gt; this will create a turbine rotor from this material.</li> <li><code>.blastTemp()</code> is meant to be paired together with <code>.ingot()</code>. Will generate a EBF recipe (and an ABS recipe) based on the parameters you give it:<ol> <li>temperature -&gt; dictates what coil tier it will require (check the coil tooltips for their max temperature).     If the temperature is below 1000, it will also generate a PBF recipe.     If temperature is above 1750, a hot ingot will be generated, this requiring a Vacuum Freezer.</li> <li>(optional) gas tier -&gt; can be <code>null</code> for none, <code>'low'</code> for nitrogen, <code>'mid'</code> for helium, <code>'high'</code> for argon, <code>'higher'</code> for neon or <code>'highest'</code> for krypton.</li> <li>(optional) EU per tick -&gt; the recipe voltage</li> <li>(optional) duration in ticks -&gt; how long the recipe should take</li> </ol> </li> <li><code>.ore()</code> will create an ore from the material.</li> <li>Optionally you can add any of these sets of parameters: <ol> <li>is emissive -&gt; <code>true</code> for emissive textures</li> <li>ore multiplier and byproduct multiplier -&gt; how many crushed ores will be given from one raw ore and how many byproducts dusts will be given throughout the ore processing </li> <li>ore multiplier, byproduct multiplier, is emissive</li> </ol> </li> <li><code>.washedIn()</code></li> <li><code>.separatedIn()</code></li> <li><code>.separatedInto()</code></li> <li><code>.oreSmeltInto()</code></li> <li><code>.polarizesInto()</code></li> <li><code>.arcSmeltInto()</code></li> <li><code>.maceratesInto()</code></li> <li><code>.ingotSmeltInto()</code></li> <li><code>.addOreByproducts()</code></li> <li><code>.cableProperties()</code> generates wires and cables(if material is not a superconductor). The following parameter sets can be given:<ol> <li>Voltage, amperage, loss per block</li> <li>Voltage, amperage, loss per block, is superconductor -&gt; for a super conductor, set loss as 0 and is super conductor as true</li> <li>Voltage, amperage, loss per block, is super conductor, critical temperature</li> </ol> </li> <li><code>.toolProperties()</code></li> <li><code>.fluidPipeProperties()</code></li> <li><code>.itemPipeProperties()</code></li> <li><code>.addDefaultEnchant()</code></li> </ul> <p>Harvest Level &amp; Burn Time</p> <p>For <code>.ingot()</code>, <code>.dust()</code> and <code>.gem()</code>, optionally you can put inside the parentheses any of these sets of parameters:</p> <ol> <li>harvest level (e.g. <code>.ingot(2)</code> will make the material have the harvest level of iron tools) </li> <li>harvest level, burn time (e.g. <code>ingot(2, 2000)</code> will make the material have the harvest level of iron tools and will burn in furnaces as fuel for 2000 ticks or 100 seconds).</li> </ol> <p>Disabling Decomposition</p> <p>Depending on the composition, GT will autogenerate an electrolyzer or centrifuge recipe to decompose the material. You can block that by adding the disable decomposition flag. <code>DISABLE_DECOMPOSITION</code></p> <p>Choosing EU/t</p> <p>GT has some builtin constants to ease choosing the required EU/t: - <code>GTValues.V</code> for a full amp of power at the selected tier - <code>GTValues.VA</code> for a full amp, adjusted for cable loss - <code>GTValues.VH</code> for half an amp - <code>GTValues.VHA</code> for half an amp, adjusted for cable loss</p> <p>These values are arrays containing the respective EU/t values for each tier. For example, you can get a full amp of EV power, adjusted for cable loss like this:</p> <pre><code>GTValues.VA[GTValues.EV]\n</code></pre> Color Pickers <p>To chose a color for your material, you can checkout https://www.w3schools.com/colors/colors_picker.asp After you select a color with the above tool, copy the 6 digits that follow the # under the color preview.</p>"},{"location":"Modpacks/Materials-and-Elements/01-Material-Creation/#creating-an-ingot","title":"Creating an Ingot","text":"ingot.js<pre><code>GTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n    event.create('andesite_alloy')\n        .ingot()\n        .components('1x andesite', '1x iron')\n        .color(0x839689).iconSet(GTMaterialIconSet.DULL)\n        .flags(GTMaterialFlags.GENERATE_PLATE, GTMaterialFlags.GENERATE_GEAR, GTMaterialFlags.GENERATE_SMALL_GEAR)\n})\n</code></pre>"},{"location":"Modpacks/Materials-and-Elements/01-Material-Creation/#creating-a-gem","title":"Creating a Gem","text":"gem.js<pre><code>GTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n    event.create('purple_coal')\n        .gem(2, 4000) \n        .element(GTElements.C) \n        .ore(2, 3) \n        .color(0x7D2DDB).iconSet(GTMaterialIconSet.LIGNITE)\n})\n</code></pre>"},{"location":"Modpacks/Materials-and-Elements/01-Material-Creation/#creating-a-dust","title":"Creating a Dust","text":"dust.js<pre><code>GTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n    event.create('mysterious_dust')\n        .dust()\n        .cableProperties(GTValues.V[GTValues.LV], 69, 0, true) // (1)\n})\n</code></pre> <ol> <li>Voltage, Amperage, EU loss, Is Superconductor.</li> </ol>"},{"location":"Modpacks/Materials-and-Elements/01-Material-Creation/#creating-a-fluid","title":"Creating a Fluid","text":"fluid.js<pre><code>GTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n    event.create('mysterious_ooze')\n        .fluid()\n        .color(0x500bbf)\n        .fluidTemp(69420) \n})\n</code></pre>"},{"location":"Modpacks/Materials-and-Elements/02-Element-Creation/","title":"Element Creation","text":""},{"location":"Modpacks/Materials-and-Elements/02-Element-Creation/#element-creation","title":"Element Creation","text":"<p>Elements are the base of GT materials. Registering an element WILL NOT add any items. To make a new element(NOTE: you can add only elements that are NOT present on the periodic table), write an <code>event.create()</code> call in the registry function like in the example below. Inside the parentheses the following parameters are introduced:</p> <ol> <li>Element Name -&gt; use '' or \"\" to write the element name.</li> <li>Proton Count(use -1 if it is not an element that will get a material).</li> <li>Neutron Count(use -1 if it is not an element that will get a material).</li> <li>Half Life Seconds(decay stuff. Use -1 if you don't need to use decay).</li> <li>Material to decay to(more decay stuff. Use null).</li> <li>Atomic Symbol(what will be displayed as in chemical formulas) -&gt; use '' or \"\" to write the atomic symbol.</li> <li>Is isotope(ex. Uranium 235 and Uranium 238. Use false if you are not making an isotope)</li> </ol> <p>When a material will be created from this element, the above properties will affect the auto-generated recipes.</p> <pre><code>GTCEuStartupEvents.registry('gtceu:element', event =&gt; {\n   event.create('test_element', 27, 177, -1, null, 'test', false) // (1)\n})\n</code></pre> <ol> <li>Element Name, Protons, Neutrons, Half Life Seconds, Decay To, Atomic Symbol, Is Isotope</li> </ol>"},{"location":"Modpacks/Materials-and-Elements/Material-Flags/","title":"Material Flags","text":"<p>Using material flags, you can specify several properties of each material, which can influence how the material behaves, as well as which items are generated for it.</p> <p>Using material Flags</p> <pre><code>GTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n    event.create('my_material')\n        // ...\n        .flags(GTMaterialFlags.FLAMMABLE)\n})\n</code></pre>"},{"location":"Modpacks/Materials-and-Elements/Material-Flags/#generate-items","title":"Generate Items","text":"<ul> <li><code>FORCE_GENERATE_BLOCK</code></li> <li><code>GENERATE_BOLT_SCREW</code></li> <li><code>GENERATE_DENSE</code></li> <li><code>GENERATE_FINE_WIRE</code></li> <li><code>GENERATE_FOIL</code></li> <li><code>GENERATE_FRAME</code></li> <li><code>GENERATE_GEAR</code></li> <li><code>GENERATE_LENS</code></li> <li><code>GENERATE_LONG_ROD</code></li> <li><code>GENERATE_PLATE</code></li> <li><code>GENERATE_RING</code></li> <li><code>GENERATE_ROD</code></li> <li><code>GENERATE_ROTOR</code></li> <li><code>GENERATE_ROUND</code></li> <li><code>GENERATE_SMALL_GEAR</code></li> <li><code>GENERATE_SPRING</code></li> <li><code>GENERATE_SPRING_SMALL</code></li> </ul>"},{"location":"Modpacks/Materials-and-Elements/Material-Flags/#other-flags","title":"Other Flags","text":"<ul> <li><code>BLAST_FURNACE_CALCITE_DOUBLE</code></li> <li><code>BLAST_FURNACE_CALCITE_TRIPLE</code></li> <li><code>DISABLE_ALLOY_BLAST</code></li> <li><code>DISABLE_ALLOY_PROPERTY</code></li> <li><code>CRYSTALLIZABLE</code></li> <li><code>DECOMPOSITION_BY_CENTRIFUGING</code></li> <li><code>DECOMPOSITION_BY_ELECTROLYZING</code></li> <li><code>DISABLE_DECOMPOSITION</code></li> <li><code>EXCLUDE_BLOCK_CRAFTING_BY_HAND_RECIPES</code></li> <li><code>EXCLUDE_BLOCK_CRAFTING_RECIPES</code></li> <li><code>EXCLUDE_PLATE_COMPRESSOR_RECIPES</code></li> <li><code>EXPLOSIVE</code></li> <li><code>FLAMMABLE</code></li> <li><code>HIGH_SIFTER_OUTPUT</code></li> <li><code>IS_MAGNETIC</code></li> <li><code>MORTAR_GRINDABLE</code></li> <li><code>NO_SMASHING</code></li> <li><code>NO_SMELTING</code></li> <li><code>NO_UNIFICATION</code></li> <li><code>NO_WORKING</code></li> <li><code>SOLDER_MATERIAL</code></li> <li><code>SOLDER_MATERIAL_BAD</code></li> <li><code>SOLDER_MATERIAL_GOOD</code></li> <li><code>STICKY</code></li> </ul>"},{"location":"Modpacks/Materials-and-Elements/Material-Icon-Sets/","title":"Icon Sets","text":"<p>The material system uses icon sets to determine the textures of generated blocks and items.</p>"},{"location":"Modpacks/Materials-and-Elements/Material-Icon-Sets/#available-icon-sets","title":"Available Icon Sets","text":"<p>The following icon sets are available by default:</p> <ul> <li><code>GTMaterialIconSet.BRIGHT</code></li> <li><code>GTMaterialIconSet.CERTUS</code></li> <li><code>GTMaterialIconSet.DIAMOND</code></li> <li><code>GTMaterialIconSet.DULL</code></li> <li><code>GTMaterialIconSet.EMERALD</code></li> <li><code>GTMaterialIconSet.FINE</code></li> <li><code>GTMaterialIconSet.FLINT</code></li> <li><code>GTMaterialIconSet.FLUID</code></li> <li><code>GTMaterialIconSet.GAS</code></li> <li><code>GTMaterialIconSet.GEM_HORIZONTAL</code></li> <li><code>GTMaterialIconSet.GEM_VERTICAL</code></li> <li><code>GTMaterialIconSet.GLASS</code></li> <li><code>GTMaterialIconSet.LAPIS</code></li> <li><code>GTMaterialIconSet.LIGNITE</code></li> <li><code>GTMaterialIconSet.MAGNETIC</code></li> <li><code>GTMaterialIconSet.METALLIC</code></li> <li><code>GTMaterialIconSet.NETHERSTAR</code></li> <li><code>GTMaterialIconSet.OPAL</code></li> <li><code>GTMaterialIconSet.QUARTZ</code></li> <li><code>GTMaterialIconSet.ROUGH</code></li> <li><code>GTMaterialIconSet.RUBY</code></li> <li><code>GTMaterialIconSet.SAND</code></li> <li><code>GTMaterialIconSet.SHINY</code></li> <li><code>GTMaterialIconSet.WOOD</code></li> </ul>"},{"location":"Modpacks/Materials-and-Elements/Material-Icon-Sets/#custom-icon-sets","title":"Custom Icon Sets","text":"<p>Custom iconsets can be specified as well, using the <code>gtceu:matieral_icon_set</code> event:</p> custom_iconsets.js<pre><code>GTCEuStartupEvents.registry('gtceu:material_icon_set', event =&gt; {\n    event.create('starry')\n        .parent('shiny')\n})\n</code></pre>"},{"location":"Modpacks/Materials-and-Elements/Material-Icon-Sets/#available-icon-set-hierarchy","title":"Available Icon Set Hierarchy","text":"<p>Icon sets may define only a specific subset of icons. In case an icon set doesn't contain a specific icon for an item, the respective icon from its parent will be used.</p> <p>The root icon set is <code>DULL</code></p> <pre><code>graph BT\n    METALLIC --&gt; DULL\n    MAGNETIC --&gt; METALLIC\n    SHINY --&gt; METALLIC\n    BRIGHT --&gt; SHINY\n    DIAMOND --&gt; SHINY\n    EMERALD --&gt; DIAMOND\n    GEM_HORIZONTAL --&gt; EMERALD\n    GEM_VERTICAL --&gt; EMERALD\n    RUBY --&gt; EMERALD\n    OPAL --&gt; RUBY\n    GLASS --&gt; RUBY\n    NETHERSTAR --&gt; GLASS\n    FINE --&gt; DULL\n    SAND --&gt; FINE\n    WOOD --&gt; FINE\n    ROUGH --&gt; FINE\n    FLINT --&gt; ROUGH\n    LIGNITE --&gt; ROUGH\n    QUARTZ --&gt; ROUGH\n    CERTUS --&gt; QUARTZ\n    LAPIS --&gt; QUARTZ\n    FLUID --&gt; DULL\n    RADIOACTIVE --&gt; METALLIC</code></pre>"},{"location":"Modpacks/Materials-and-Elements/Material-Properties/","title":"Material Properties (WIP)","text":"<pre><code>BlastProperty.blastTemp() // (1)\nBlastProperty.gasTier() // (2)\nBlastProperty.durationOverride() // (3)\nBlastProperty.eutOverride() // (4)\n- DustProperty:\n   - .dust() // (5)\n- FluidPipeProperty:\n   - .fluidPipeProperties() // (6)\n- FluidProperty:\n   - .fluid() // (7)\n   - .isGas() // (8)\n   - .hasBlock() \n- GemProperty:\n   - .gem()\n- IngotProperty:\n   - .ingot() // (9)\n      - .smeltInto()\n      - .arcSmeltInto()\n      - .magneticMaterial()\n      - .macerateInto()\n- OreProperty:\n   - .ore() // (10)\n</code></pre> <ol> <li> <p>Sets the Blast Furnace Temperature of the material. If the temperature is below 1000K recipes will be generated in the Primitive Blast Furnace. If above 1750K recipes for the Hot Ingot will be created along with the Vacuum Freezer Recipe to cool the ingot. Example: <code>.blastTemp(2750)</code></p> </li> <li> <p>Sets the Gas Tier which determins what GAS EBF recipes will be generated. Example: <code>.gasTier(LOW)</code></p> </li> <li> <p>Overrides the EBF's default behaviour for recipe durations.</p> </li> <li> <p>Overrides the EBF's default behaviour for EU/t.</p> </li> <li> <p>Used for creating a dust material. The haverst level and burn time can be specified in the brackets. Example: <code>.dust(2, 4000)</code></p> </li> <li> <p>Creates a fluid pipe out of the material it is added to. The possible values are: Max Fluid Temperature, Throughput, Gas Proof, Acid Proof, Cyro Proof, Plasma Proof,  Channels. Example: <code>.fluidPipeProperties(9620, 850, false, false, false, false, 1)</code></p> </li> </ol>"},{"location":"Modpacks/Materials-and-Elements/Modifying-Existing-Materials/","title":"Modifying Existing Materials","text":"<p>All periodic table elements are present in GT, but some of them don't have any properties attached. You can also add a BlastProperty for EBF autogenerated recipes. You can also do this for other materials such as Obsidian. Here is how you can add them:</p> periodic_table_elements.js<pre><code>    const $IngotProperty = Java.loadClass('com.gregtechceu.gtceu.api.data.chemical.material.properties.IngotProperty');\n    const $DustProperty = Java.loadClass('com.gregtechceu.gtceu.api.data.chemical.material.properties.DustProperty');\n    const $BlastProperty = Java.loadClass('com.gregtechceu.gtceu.api.data.chemical.material.properties.BlastProperty');\n\n    GTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n\n        // Ingot\n        GTMaterials.Zirconium.setProperty(PropertyKey.INGOT, new $IngotProperty());\n        GTMaterials.Obsidian.setProperty(PropertyKey.INGOT, new $IngotProperty());\n\n        // Dust\n        GTMaterials.Selenium.setProperty(PropertyKey.DUST, new $DustProperty());\n\n        // Blast Property\n        GTMaterials.Zirconium.setProperty(PropertyKey.BLAST, new $BlastProperty(8000, 'higher', GTValues.VA(GTValues.MV), 8000));\n\n    });\n</code></pre> <p>Adding fluids to existing materials requires a bit of work with the new FluidStorage system</p> fluid_property.js<pre><code>const $FluidProperty = Java.loadClass('com.gregtechceu.gtceu.api.data.chemical.material.properties.FluidProperty');\nconst $FluidBuilder = Java.loadClass('com.gregtechceu.gtceu.api.fluids.FluidBuilder');\nconst $FluidStorageKeys = Java.loadClass('com.gregtechceu.gtceu.api.fluids.store.FluidStorageKeys');\n\nGTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n    addFluid(GTMaterials.Iodine, $FluidStorageKeys.LIQUID); // Can be LIQUID, GAS, PLASMA or MOLTEN\n    addFluid(GTMaterials.Oganesson, $FluidStorageKeys.GAS);\n}\n\n\nlet addFluid = (mat, key) =&gt; {\n    let prop = new $FluidProperty();\n    prop.getStorage().enqueueRegistration(key, new $FluidBuilder());\n    mat.setProperty(PropertyKey.FLUID, prop);\n}\n</code></pre> <p>You can even add an ore to existing materials:</p> ore_property.js<pre><code>    GTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n\n    const $OreProperty = Java.loadClass('com.gregtechceu.gtceu.api.data.chemical.material.properties.OreProperty');\n\n        // Zinc Ore\n        GTMaterials.Zinc.setProperty(PropertyKey.ORE, new $OreProperty());\n\n    });\n</code></pre> <p>You can also add flags to existing materials:</p> flags.js<pre><code>    GTCEuStartupEvents.registry('gtceu:material', event =&gt; {\n\n        GTMaterials.Lead.addFlags(GTMaterialFlags.GENERATE_GEAR); // This is for materials already in GTCEU\n        GTMaterials.get('custom_material_name').addFlags(GTMaterialFlags.GENERATE_FOIL); // This only works for materials added by GTCEU addons\n\n    });\n</code></pre> <p>Editing the color of an existing material:</p> material_modification.js<pre><code>    GTCEuStartupEvents.materialModification(event =&gt; {\n        GTMaterials.BismuthBronze.setMaterialARGB(0x82AD92) //(1)\n    })\n</code></pre> <ol> <li>Most methods in the <code>Material</code> class can be used in the <code>materialModification</code> event</li> </ol>"},{"location":"Modpacks/Materials-and-Elements/TagPrefixes-and-the-power-of-.setIgnored%28%29/","title":"TagPrefixes and the power of .setIgnored()","text":""},{"location":"Modpacks/Materials-and-Elements/TagPrefixes-and-the-power-of-.setIgnored%28%29/#what-is-a-tagprefix","title":"What is a TagPrefix?","text":"<p>TagPrefixes are GTCEu Modern's way of streamlining applying item and block tags to Materials, along with some other functions. The <code>TagPrefix</code> class,  available for use in startup and server scripts, contains a number of predefined TagPrefixes that  associate potentially everything from drill heads to flawless gemstones with a material. A common and easy-to-understand example is <code>TagPrefix.ingot</code>,  which associates with all Materials that have an IngotProperty and thus an associated ingot item, including custom ones defined via KubeJS.  TagPrefixes provide localization, item and block tagging, and influence many crafting recipes, and are integral to the functioning of GTCEu's material definition system.</p> <p>What TagPrefixes are there?</p> <p>A list of all availabe TagPrefixes can be found in GTCEu Modern's GitHub or in the .JAR file, in the class <code>TagPrefix</code>.</p>"},{"location":"Modpacks/Materials-and-Elements/TagPrefixes-and-the-power-of-.setIgnored%28%29/#what-is-setignored","title":"What is .setIgnored()?","text":"<p>While trawling thorugh GTCEu Modern's codebase, or simply by playing Minecraft, you may have noticed that GTCEu Modern treats some vanilla materials differently. For example, iron ingots are a vanilla item, yet GTCEu Modern does not create a duplicate iron ingot, as its Material definition would suggest it is meant to do. Instead, the GTCEu Modern Material entry for iron treats the vanilla iron ingot as the material's ingot, and thus produces no duplicates. This functionality is governed by TagPrefixes, and can also be harnessed by packmakers for their own custom items, or when writing compatibility between GTCEu Modern and another mod.</p>"},{"location":"Modpacks/Materials-and-Elements/TagPrefixes-and-the-power-of-.setIgnored%28%29/#okay-but-how-do-i-use-this","title":"Okay, but how do I use this?","text":"<p>This functionality can be leveraged in the material modification event, which is a startup event. The material modification event occurs in Minecraft's boot sequence after Material registration is finalized, but before the Material registry is closed; you won't be able to define any new Materials using it. The following calls are available for each TagPrefix:   - <code>.setIgnored()</code> with one input parameter: Takes a <code>Material</code> as input and prevents GTCEu from associating that specific TagPrefix with that Material.   - <code>.setIgnored()</code> with two input parameters: Takes a <code>Material</code> and an <code>Item</code> or <code>Block</code> (or any class that that implements the <code>ItemLike</code> interface) as input; causes GTCEu to treat the passed <code>ItemLike</code> as whatever item the TagPrefix would have originally generated for the Material. An <code>ItemLike...</code> varargs in the form of a JS array may also be passed to perform the action on multiple blocks and/or items at once.   - <code>.removeIgnored()</code>: takes a <code>Material</code> as input and re-enables generation of the item associated with the TagPrefix for that material.</p> <p>!!! caution \"Beware of <code>Item.of()</code>!\" The classic way to retrieve an <code>Item</code> in KubeJS, namely the <code>Item.of()</code> wrapper, doesn't work here. You will need to directly pass an <code>ItemLike</code> from a Java class for <code>.setIgnored()</code> to work correctly.</p> <p>A more illustrative example, using some Applied Energistics 2 items:</p> <p>setignored_usage_example.js<pre><code>GTCEuStartupEvents.materialModification(event =&gt; { // (1)\n    TagPrefix.gemChipped.setIgnored(GTMaterialRegistry.getMaterial(\"fluix_crystal\")) // (2)\n    TagPrefix.rock.setIgnored(GTMaterialRegistry.getMaterial(\"sky_stone\"), AEBlocks.SKY_STONE_BLOCK) // (3)\n    TagPrefix.ingot.removeIgnored(GTMaterials.Iron) // (4)\n})\n</code></pre>   1. This event has no methods such as <code>event.create()</code>, as it is not intended to be used to create anything, only tweak pre-existing Material associations. In fact, this event has no accessible methods whatsoever.   2. This call prevents GTCEu Modern from creating a chipped gem variant of the custom 'fluix_crystal' Material.   3. This call makes GTCEu Modern associate AE2's Sky Stone block as a rock type (like vanilla stone is associated with the GTCEu Modern stone <code>Material</code>) with the custom 'sky_stone' Material. It may be necessary to manually load whatever data definition class contains the <code>ItemLike</code> you wish to associate with your <code>Material</code>, depending on how the mod's author has provided KubeJS access to the modn's classes.   4. This call makes GTCEu Modern de-associate vanilla iron ingots from GTCEu Modern's iron Material entry, causing it to generate a duplicate iron ingot.</p> <p>The <code>Material</code> for which you are adjusting the TagPrefix must be registered in GTCEu Modern's material registry; if this material is custom, this is done using <code>GTCEuStartupEvents.registry()</code>, as depicted in these docs.</p>"},{"location":"Modpacks/Materials-and-Elements/The-ChemicalHelper-class/","title":"The ChemicalHelper class","text":"<p>It may behoove a packmaker working with GTCEu Modern to learn about the ChemicalHelper class. This class, available for use in server scripts,  contains a number of useful methods that can ease working with GTCEu Materials in contexts where it might not be possible, or it might be unsafe, to work with item or block tags.</p>"},{"location":"Modpacks/Materials-and-Elements/The-ChemicalHelper-class/#useful-functions-that-chemicalhelper-offers","title":"Useful functions that ChemicalHelper offers","text":"<p>The following functions are available for use by packmakers:   - <code>.getMaterial()</code>: can take almost any form of item reference (<code>Item</code>, <code>ItemStack</code>, <code>Ingredient</code> and so on) and will return the <code>Material</code> entry associated with it. If there is no associated Material, the method returns <code>null</code>. A <code>Fluid</code> may also be passed as input.   - <code>.getPrefix()</code>: Takes an item reference as input and will return the TagPrefix it is associated with it. If there is non associated, the method will return <code>null</code>.   - <code>.getIngot()</code>   - <code>.getDust()</code>     - These two methods take two parameters each as input: a <code>Material</code>, and a number representing a material amount, and will return an ItemStack representation of the respective Material's dust or ingot form, if it has one.       The material amount is usually very large; it is generally an integer multiple or fraction of the predefined value <code>GTValues.M</code>, which is the commonly agreed-upon material amount of one (1) ingot or regular dust.       Depending on the amount passed, the functions will return different items: <code>.getIngot()</code>, for example, will return       an ItemStack representation of a block or nugget of the associated Material if the passed amount is large or small enough.       <code>.getDust()</code>, in similar fashion, will return regular, small or tiny dust ItemStack representations depending on the material amount passed.   - <code>.getTag()</code>   - <code>.getBlockTag()</code>   - <code>.getTags()</code>   - <code>.getBlockTags()</code>     - Takes a <code>TagPrefix</code> and a non-<code>null</code> <code>Material</code> as input and returns the first item or block tag       (or a Java array of all item or block tags if the plural functions are used) possessed by the item represented by that <code>TagPrefix</code>-<code>Material</code> combination.   - <code>.get()</code>: Takes a <code>TagPrefix</code>, a <code>Material</code> and optionally an item count that otherwise defaults to 1, and returns an ItemStack representing that <code>TagPrefix</code>-<code>Material</code> combination with the specified item count.</p> <p>Some usage examples:</p> <p>chemicalhelper_example_script.js<pre><code>var ironMaterial = ChemicalHelper.getMaterial(Item.of(\"gtceu:double_iron_plate\").asItem()) // (1)\nvar rawOrePrefix = ChemicalHelper.getPrefix(Item.of(\"gtceu:raw_platinum\").asItem()) // (2)\nvar cobaltIngotStack = ChemicalHelper.get(TagPrefix.ingot, GTMaterials.Cobalt, 32) // (3)\n\nvar goldNugget = ChemicalHelper.getIngot(GTMaterials.Gold, GTValues.M / 9)// (4)\nvar steelBlock = ChemicalHelper.getIngot(GTMaterials.Steel, GTValues.M * 9)\n\nvar ashSmallDust = ChemicalHelper.getDust(GTMaterials.Ash, GTValues.M / 4)// (5)\n</code></pre> 1. <code>ironMaterial</code> is now a reference to <code>GTMaterials.Iron</code>. 2. <code>rawOrePrefix</code> is now a reference to <code>TagPrefix.rawOre</code>. 3. <code>cobaltIngotStack</code> is now an ItemStack representing half a stack of cobalt ingots. 4. <code>goldNugget</code> is now an ItemStack representing one gold nugget. 5. <code>ashSmallDust</code> is now an ItemStack representing a small ash pile.</p>"},{"location":"Modpacks/Ore-Generation/","title":"Ore Generation","text":"<p>GregTech has its own ore generation that is quite different from that of Minecraft's standard system. Due to technical limitations, this system does not use Minecraft's features and works a bit differently.</p> <p>GT's ores generate in large veins that are placed along a grid (and a random offset per vein) throughout the world.</p> <p>In this section, you will learn how to customize ore generation for your modpack.</p>"},{"location":"Modpacks/Ore-Generation/#reloading-ore-generation","title":"Reloading Ore Generation","text":"<p>Warning</p> <p>After changing the ore generation you will have to restart the server or re-open your world! It is not enough to simply use <code>/reload</code> in this case.</p>"},{"location":"Modpacks/Ore-Generation/01-Customizing-Veins/","title":"Creating and Modifying Ore Veins","text":"<p>You can create your own custom ore veins using KJS. It is also possible to modify or even delete existing ones.</p>"},{"location":"Modpacks/Ore-Generation/01-Customizing-Veins/#creating-new-veins","title":"Creating New Veins","text":"server_scripts/custom_ore_vein.js<pre><code>GTCEuServerEvents.oreVeins(event =&gt; {\n    event.add(\"kubejs:custom_vein\", vein =&gt; {\n        // Basic vein generation properties\n        vein.weight(200) // [*] (1)\n        vein.clusterSize(40) // [*] (2)\n        vein.density(0.25) // [*] (3)\n        vein.discardChanceOnAirExposure(0) // (4)\n\n        // Define where the vein can generate\n        vein.layer(\"deepslate\") // [*] (5)\n        vein.dimensions(\"minecraft:overworld\") // (6)\n        vein.biomes(\"#minecraft:is_overworld\") // (7)\n\n        // Define a height range:\n        // You must choose EXACTLY ONE of these options! [*]\n        vein.heightRangeUniform(-60, 20) // (8)\n        vein.heightRangeTriangle(-60, 20) // (9)\n        vein.heightRange(/* ... */) // (10)\n\n        // Define the vein's generator:\n        vein.generator(/* ... */) // [*] (11)\n\n        // Add one or more type of surface indicator to the vein:\n        vein.addIndicator(/* ... */) // (12)\n    })\n})\n</code></pre> <ol> <li>An ore vein's weight determines the chance of it being chosen over another vein type, to be generated at a possible vein location.    The higher the weight, the more frequently an ore vein type will be generated.</li> <li>Cluster size determines the diameter of an ore vein.</li> <li>The density determines how frequently ores occur inside the vein.</li> <li>Determines the chance of an ore block being skipped when it is exposed to air. Must be between <code>0</code> and <code>1</code>. Default: <code>0</code></li> <li>See Layers &amp; Dimensions</li> <li>Limits vein generation to the supplied dimensions. Note that these vein's layer must be applicable for them. Default: All dimensions of the vein's layer. Accepts any number of parameters.</li> <li>Determines the biome (or biome tag) the vein can generate in. Default: If no biome is explicitly set, the vein will generate in any biome. Accepts either a single biome tag (prefixed with <code>#</code>), or any number of individual biomes.</li> <li>Uniformly distributed across the height range</li> <li>Biased towards the center of the height range</li> <li>You can also use Minecraft's <code>HeightRangePlacement</code> directly, instead of the above shorthand versions: <pre><code>vein.heightRange(\n    height: {\n        type: \"uniform\",\n        min_inclusive: {\n            absolute: -60\n        },\n        max_inclusive: {\n            absolute: 20\n        }\n    })\n</code></pre></li> <li>See Generators for a list of available generators.</li> <li>See Generators for a list of available generators.</li> </ol> Creating a new biome tag for your ore vein <p>In case you want to limit your ore vein to multiple biomes that don't have a common tag yet, you can either specify all biomes manually, or you can create a biome tag:</p> server_scripts/biome_tags.js<pre><code>ServerEvents.tags('biome', event =&gt; {\n    event.add('kubejs:my_biome_tag', 'minecraft:forest')\n    event.add('kubejs:my_biome_tag', 'minecraft:river')\n})\n</code></pre> <p>You can then use your biome tag by simply calling <code>vein.biomes('#kubejs:my_biome_tag')</code> in your vein definition.</p>"},{"location":"Modpacks/Ore-Generation/01-Customizing-Veins/#removing-an-existing-ore-vein","title":"Removing an Existing Ore Vein","text":"server_scripts/remove_ore_vein.js<pre><code>GTCEuServerEvents.oreVeins(event =&gt; {\n     event.remove(\"gtceu:magnetite_vein_ow\") \n})\n</code></pre> Removing all ore veins <p>If you want to remove all predefined ore veins (for example if you want to completely change ore generation in your modpack), you can use the following code:</p> <pre><code>GTCEuServerEvents.oreVeins(event =&gt; {\n    event.removeAll()\n})\n</code></pre> <p>You can also filter the veins you want to remove:</p> <pre><code>event.removeAll((id, vein) =&gt; id.path != \"magnetite_vein_ow\")\n</code></pre>"},{"location":"Modpacks/Ore-Generation/01-Customizing-Veins/#modifying-existing-veins","title":"Modifying Existing Veins","text":"server_scripts/modify_ore_vein.js<pre><code>GTCEuServerEvents.oreVeins(event =&gt; {\n    event.modify(\"gtceu:cassiterite_vein\", vein =&gt; {\n        vein.density(1.0)\n    })\n})\n</code></pre> <p>The API for vein modifications is the same as for creating new veins.</p> <p>Moving veins to other dimensions</p> <p>When moving one of the default veins to another dimension, keep in mind that you also have to change their biome(s) accordingly.</p> Modifying ALL existing veins <p>You can also modify all existing ore veins at once:</p> server_scripts/modify_all_veins.js<pre><code>GTCEuServerEvents.oreVeins(event =&gt; {\n    event.modifyAll((id, vein) =&gt; {\n        console.log(\"Modifying vein: \" + id)\n        vein.density(1.0)\n    })\n})\n</code></pre>"},{"location":"Modpacks/Ore-Generation/02-Generators/","title":"Vein &amp; Indicator Generators","text":""},{"location":"Modpacks/Ore-Generation/02-Generators/#vein-generators","title":"Vein Generators","text":""},{"location":"Modpacks/Ore-Generation/02-Generators/#layered-vein-generator","title":"Layered Vein Generator","text":"<pre><code>vein.layeredVeinGenerator(generator =&gt; generator\n    .buildLayerPattern(pattern =&gt; pattern\n        .layer(l =&gt; l.weight(3).mat(GTMaterials.Silver).size(2, 4))\n        .layer(l =&gt; l.weight(2).mat(GTMaterials.Gold).size(1, 1))\n        .layer(l =&gt; l.weight(1).block(() =&gt; Block.getBlock('minecraft:oak_log')).size(1, 1))\n        .layer(l =&gt; l.weight(1).state(() =&gt; Block.getBlock('minecraft:oak_planks').defaultBlockState()).size(1, 1))\n    )\n)\n</code></pre>"},{"location":"Modpacks/Ore-Generation/02-Generators/#veined-vein-generator","title":"Veined Vein Generator","text":"<pre><code>vein.veinedVeinGenerator(generator =&gt; generator\n    .oreBlock(GTMaterials.Silver, 4) // (1)\n    .rareBlock(GTMaterials.Gold, 1) // (2)\n    .rareBlockChance(0.25)\n    .veininessThreshold(0.1)\n    .maxRichnessThreshold(0.3)\n    .minRichness(0.3)\n    .maxRichness(0.5)\n    .edgeRoundoffBegin(10) // (3)\n    .maxEdgeRoundoff(0.2) // (4)\n)\n</code></pre> <ol> <li>Param 1: Either a material or block state Param 2: Generation weight</li> <li>Param 1: Either a material or block state Param 2: Generation weight</li> <li>Determines how much the veins become thinner towards their ends</li> <li>Determines how much the veins become thinner towards their ends</li> </ol> <p>Noise Parameters</p> <p>The vein's noise parameters can be summarized as follows: - <code>veininessThreshold</code> defines how \"sharp\" the edges of the vein are.   Higher values result in more \"blurry\" edges. - <code>maxRichnessThreshold</code> defines how many ores generate inside the vein (must be <code>&gt;= veininessThreshold</code>).   A higher distance between the values results in less \"filled\" veins. - <code>minRichness</code> and <code>maxRichness</code> allow you to limit the output of this calculation to a specific range.</p> <p>The output of this calculation determines the chance for each block in the vein to generate.</p> <p>Height Ranges</p> <p>The height range of the generator is automatically inferred if you use <code>heightRangeUniform()</code> or <code>heightRangeTriangle()</code> in the vein definition, before setting the generator. Otherwise you need to set the height range manually:</p> <pre><code>generator.minYLevel(10)\ngenerator.maxYLevel(90)\n</code></pre>"},{"location":"Modpacks/Ore-Generation/02-Generators/#dike-vein-generator","title":"Dike Vein Generator","text":"<pre><code>vein.dikeVeinGenerator(generator =&gt; generator\n    .withBlock(GTMaterials.Silver, 3, 20, 60) // (1)\n    .withBlock(GTMaterials.Gold, 1, 20, 40)\n)\n</code></pre> <ol> <li>Param 1: Either a material or block state Param 2: Generation weight Param 3: Min Y Position Param 4: Max Y Position  </li> </ol> <p>Height Ranges</p> <p>The height range of the generator is automatically inferred if you use <code>heightRangeUniform()</code> or <code>heightRangeTriangle()</code> in the vein definition, before setting the generator. Otherwise you need to set the height range manually:</p> <pre><code>generator.minYLevel(10)\ngenerator.maxYLevel(90)\n</code></pre>"},{"location":"Modpacks/Ore-Generation/02-Generators/#standard-vein-generator","title":"Standard Vein Generator","text":"<p>Not yet documented</p> <pre><code>vein.standardVeinGenerator(generator =&gt; /* ... */)\n</code></pre>"},{"location":"Modpacks/Ore-Generation/02-Generators/#geode-vein-generator","title":"Geode Vein Generator","text":"<p>Not yet documented</p> <pre><code>vein.geodeVeinGenerator(generator =&gt; /* ... */)\n</code></pre>"},{"location":"Modpacks/Ore-Generation/02-Generators/#indicator-generators","title":"Indicator Generators","text":""},{"location":"Modpacks/Ore-Generation/02-Generators/#surface-rock-indicators","title":"Surface Rock Indicators","text":"<pre><code>vein.surfaceIndicatorGenerator(indicator =&gt; indicator\n    .surfaceRock(GTMaterials.Platinum) // [*] (1)\n    .placement(\"above\") // (2)\n    .density(0.4)\n    .radius(5)\n)\n</code></pre> <ol> <li>Instead of a surface rock, you can also define any other block: <pre><code>// Using a block:\nindicator.block(Block.getBlock('minecraft:oak_log'))\n\n// Using a block state:\nindicator.state(Block.getBlock('minecraft:oak_log').defaultBlockState())\n</code></pre></li> <li>Valid options: <code>surface</code> generates indicators on the world's surface <code>above</code> generates indicators in the next free space above <code>below</code> generates indicators in the next free space below Default: <code>surface</code></li> </ol>"},{"location":"Modpacks/Ore-Generation/03-Adding-Stone-Types/","title":"Adding Stone Types for Ore Blocks","text":"<p>In a modpack, you may want to add your own stone types in order to integrate GT's ore generation with blocks from other mods.</p> <p>To do so, you need to register a tag prefix for your ore, add a language key, as well as allowing your ores to actually generate.</p>"},{"location":"Modpacks/Ore-Generation/03-Adding-Stone-Types/#files","title":"Files","text":"<p>For example purposes, this guide uses the block \"Blockium\" (ID: <code>my_mod:blockium</code>). Replace this with the block you want to add ores for.</p> startup_scripts/ore_types.js<pre><code>GTCEuStartupEvents.registry('gtceu:tag_prefix', event =&gt; {\n    event.create('blockium', 'ore') // (1)\n        .stateSupplier(() =&gt; Block.getBlock('my_mod:blockium').defaultBlockState()) // (2)\n        .baseModelLocation('my_mod:block/blockium') // (3)\n        .unificationEnabled(true)\n        .materialIconType(GTMaterialIconType.ore)\n        .generationCondition(ItemGenerationCondition.hasOreProperty)\n})\n</code></pre> <ol> <li>The first parameter for <code>create()</code> is the name that corresponds to your stone type. The second parameter is always <code>'ore'</code>!</li> <li>For <code>Block.getBlock()</code> you must use the stone type's block ID as a parameter.</li> <li>This is the <code>ResourceLocation</code> of the base stone type's model. If the base block uses custom rendering, you may need to create your own model.</li> </ol> assets/gtceu/lang/en_us.json<pre><code>{\n    \"tagprefix.blockium\": \"Blockium %s Ore\"\n}\n</code></pre>"},{"location":"Modpacks/Ore-Generation/03-Adding-Stone-Types/#generating-the-ores","title":"Generating the Ores","text":"<p>To make your ores actually generate in the world, you have several options. If you just want to stick to ore generation in the default dimensions, the easiest way to achieve this is adding your new ore base blocks to one of the following block tags:</p> <ul> <li>Overworld: <code>minecraft:stone_ore_replaceables</code> or <code>minecraft:deepslate_ore_replaceables</code></li> <li>Nether: <code>minecraft:nether_carver_replaceables</code></li> <li>The End: <code>forge:end_stone_ore_replaceables</code> on forge / <code>c:end_stone_ore_replaceables</code> on fabric</li> </ul> Adding blocks to a tag server_scripts/ore_type_tags.js<pre><code>ServerEvents.tags('block', event =&gt; {\n    event.add('minecraft:stone_ore_replaceables', 'my_mod:blockium')\n})\n</code></pre> <p>You can also add ores in other dimensions, but to do so you will have to create a custom World Generation Layer.   You'll learn how to do so in Layers &amp; Dimensions</p>"},{"location":"Modpacks/Ore-Generation/03-Adding-Stone-Types/#non-default-blockstates","title":"Non-Default BlockStates","text":"<p>Some mods may generate blocks with <code>BlockState</code>s that differ from their <code>defaultBlockState</code>. In this case you have to specify the actually generated block state in your ore stone type's <code>stateSupplier</code>:</p> <pre><code>let UtilsJS = Java.loadClass(\"dev.latvian.mods.kubejs.util.UtilsJS\")\n\nGTCEuStartupEvents.registry('gtceu:tag_prefix', event =&gt; {\n    event.create(type.path, 'ore')\n        .stateSupplier(() =&gt; UtilsJS.parseBlockState(\"my_mod:blockium[some_blockstate_property=true]\"))\n})\n</code></pre>"},{"location":"Modpacks/Ore-Generation/04-Layers-and-Dimensions/","title":"Layers and Dimensions","text":""},{"location":"Modpacks/Ore-Generation/04-Layers-and-Dimensions/#creating-a-new-world-gen-layer","title":"Creating a New World Gen Layer","text":"<p>To create ore veins in another dimension (or just at the location of certain blocks), you need to create a new worldgen layer. You may also need to add a custom stone type for your ores.</p> startup_scripts/world_gen_layers.js<pre><code>GTCEuStartupEvents.registry('gtceu:world_gen_layer', event =&gt; {\n    event.create('my_custom_layer')\n        .targets('#minecraft:stone_ore_replaceables', 'minecraft:endstone') // [*] (1)\n        .dimensions('minecraft:overworld', 'minecraft:the_end') // [*]\n})\n</code></pre> <ol> <li>Accepts tags, blocks and block states.    Also accepts a <code>RuleTest</code> or <code>RuleTestSupplier</code> in case you need a bit more flexibility.</li> </ol> <p>Once the layer is created, you can refer to it by its name when creating or modifying an ore vein:</p> server_scripts/ores.js<pre><code>GTCEuServerEvents.oreVeins(event =&gt; {\n    event.add(\"kubejs:custom_vein\", vein =&gt; {\n        vein.layer(\"my_custom_layer\")\n        // ...\n    })\n})\n</code></pre>"},{"location":"Modpacks/Ore-Generation/Bedrock-Fluid-Veins/","title":"Bedrock Fluid Veins","text":"<p>Bedrock Fluid Veins are invisable veins that exist under the bedrock, to find Fluid Veins you must have at least a HV tier Prospector. A Fluid Drilling Rig must be used to obtain the fluids out of the vein.</p>"},{"location":"Modpacks/Ore-Generation/Bedrock-Fluid-Veins/#creating-a-bedrock-fluid-vein","title":"Creating a Bedrock Fluid Vein","text":"fluid_veins.js<pre><code>// In server events\nGTCEuServerEvents.fluidVeins(event =&gt; {\n\n    event.add('gtceu:custom_bedrock_fluid_vein', vein =&gt; {\n        vein.addSpawnDimension('minecraft:overworld')\n        vein.fluid(() =&gt; Fluid.of('gtceu:custom_fluid').fluid)\n        vein.weight(600)\n        vein.minimumYield(120)\n        vein.maximumYield(720)\n        vein.depletionAmount(2)\n        vein.depletionChance(1)\n        vein.depletedYield(50)\n    });\n</code></pre>"},{"location":"Modpacks/Other-Topics/","title":"Other Topics","text":"<p>This section contains other topics that aren't necessarily large enough to be grouped into their own categories.</p>"},{"location":"Modpacks/Other-Topics/Adding-and-Removing-Recipes/","title":"Adding and Removing Recipes","text":""},{"location":"Modpacks/Other-Topics/Adding-and-Removing-Recipes/#removing-recipes","title":"Removing Recipes","text":"<p>Removing GTCEu Modern recipes with KubeJS works the same as any other recipe, meaning they can be removed by: ID, Mod, Input, Output, Type or a Mixture.</p> gtceu_removal.js<pre><code>ServerEvents.recipes(event =&gt; {\n    event.remove({ id: 'gtceu:smelting/sticky_resin_from_slime' }) // (1)\n    event.remove({ mod: 'gtceu' }) // (2)\n    event.remove({ type: 'gtceu:arc_furnace' }) // (3)\n    event.remove({ input: '#forge:ingots/iron' }) // (4)\n    event.remove({ output: 'minecraft:cobblestone' }) // (5)\n    event.remove({ type: 'gtceu:assembler', input: '#forge:plates/steel' }) // (6)\n})\n</code></pre> <ol> <li>Targets the slime to sticky resin furnace recipe only for removal.</li> <li>Targets all recipes under the gtceu mod id for removal.</li> <li>Targets all recipes in the arc furnace for removal.</li> <li>Targets all recipes that have an input of <code>#forge:ingots/iron</code> for removal.</li> <li>Targets all recipes that have an output of <code>minecraft:cobblestone</code> for removal.</li> <li>Targets all recipes in the gtceu assembler that have an input of <code>#forge:plates/steel</code> for removal.</li> </ol>"},{"location":"Modpacks/Other-Topics/Adding-and-Removing-Recipes/#modifiying-recipes","title":"Modifiying Recipes","text":"<p>With KubeJS it is possible to modify the Inputs or Outputs of existing GTCEu Modern recipes, which uses the same method of targeting the recipes.</p> gtceu_modify.js<pre><code>ServerEvents.recipes(event =&gt; {\n    event.replaceInput({ mod: 'gtceu' }, 'minecraft:sand', '#forge:sand') // (1)\n    event.replaceOutput({ type: 'gtceu:arc_furnace' }, 'gtceu:wrought_iron_ingot', 'minecraft:dirt') // (2)\n})\n</code></pre> <ol> <li>Targets all gtceu recipes that have and input of <code>minecraft:sand</code> and replaces it with <code>#forge:sand</code>.</li> <li>Targets all gtceu arc furnace recipes that have an output of <code>gtceu:wrought_iron_ingot</code> and replaces it with <code>minecraft:dirt</code>.</li> </ol>"},{"location":"Modpacks/Other-Topics/Adding-and-Removing-Recipes/#adding-recipes","title":"Adding Recipes","text":"<p>Syntax: <code>event.recipes.gtceu.RECIPE_TYPE(string: recipe id)</code></p> gtceu_add.js<pre><code>ServerEvents.recipes(event =&gt; {\n    event.recipes.gtceu.assembler('test')\n        .itemInputs(\n            '64x minecraft:dirt',\n            '32x minecraft:diamond'\n        )\n        .inputFluids(\n            Fluid.of('minecraft:lava', 1500)\n        )\n        .itemOutputs(\n            'minecraft:stick'\n        )\n        .duration(100)\n        .EUt(30)\n})\n</code></pre>"},{"location":"Modpacks/Other-Topics/Adding-and-Removing-Recipes/#event-calls-for-adding-inputs-and-outputs","title":"Event calls for adding inputs and outputs","text":"<ul> <li>Basic calls:<ul> <li><code>.input()</code>: The most basic input definition available. Takes two parameters: one RecipeCapability that defines what input type this call is supposed to be (usually an item, a fluid or energy, but can also be, for example, Create Stress Units), and an Object that defines the input itself. Available RecipeCapabilities can be found in the GTCEu Modern GitHub or the mod's .JAR file, but the class containing all of GTCEu Modern's native RecipeCapabilities, <code>GTRecipeCapabilites</code>, must be manually loaded in your scripts. This method is unwieldy to use in Javascript; it is more user-friendly to use the ones below that clearly tell you what input type they call.</li> <li><code>.output()</code>: As above, but defines an output instead. Takes the exact same parameters. This method is likewise unwieldy to use; it is more user-friendly to use the ones below that clearly tell you what output type they call.</li> </ul> </li> <li>Inputs:<ul> <li>Items:<ul> <li><code>.itemInput()</code></li> <li><code>.itemInputs()</code></li> <li><code>.chancedInput()</code></li> <li><code>.notConsumable()</code></li> </ul> </li> <li>Fluids:<ul> <li><code>.inputFluids()</code></li> <li><code>.chancedFluidInput()</code></li> <li><code>.notConsumableFluid()</code></li> </ul> </li> <li>Misc:<ul> <li><code>.circuit()</code></li> </ul> </li> </ul> </li> <li>Outputs:<ul> <li>Items:<ul> <li><code>.itemOutput()</code></li> <li><code>.itemOutputs()</code></li> <li><code>.chancedOutput()</code></li> </ul> </li> <li>Fluids:<ul> <li><code>.outputFluids()</code></li> <li><code>.chancedFluidOutput()</code></li> </ul> </li> </ul> </li> <li>Energy:<ul> <li><code>.inputEU()</code>: Makes the recipe consume a lump sum of EU to start the recipe. Most often seen in fusion reactor recipes.</li> <li><code>.outputEU()</code>: Makes the recipe produce a lump sum of EU upon recipe completion.</li> <li><code>.EUt()</code>: Takes a numerical value represesnting an EU amount. Positive values will make the recipe consume energy per tick, negative ones will make it generate energy per tick.</li> </ul> </li> <li>More granular functionality:<ul> <li><code>.perTick()</code>: Using this will enable you to control whether a recipe input/output is consumed/produced per tick the recipe is running or all at once at recipe start/end. Set to true with <code>.perTick(true)</code> to make the recipe builder consider any following input/output calls as per-tick. Remember to set the value to false with <code>.perTick(false)</code> after the calls you intend to be per-tick, to prevent behaviour you don't want!</li> </ul> </li> </ul>"},{"location":"Modpacks/Other-Topics/Adding-and-Removing-Recipes/#the-research-system","title":"The Research System","text":"<p>GTCEu has Research System which allows for adding extra requirements to recipes such as: Scanner Research, Station Research and Computation.</p> scanner_research.js<pre><code>ServerEvents.recipes(event =&gt; {\n    event.recipes.gtceu.assembly_line('scanner_test')\n        .itemInputs('64x minecraft:coal')\n        .itemOutputs('minecraft:diamond')\n        .duration(10000)\n        .EUt(GTValues.VA[GTValues.IV])\n        [\"scannerResearch(java.util.function.UnaryOperator)\"](b =&gt; b.researchStack(Item.of('minecraft:coal_block')).EUt(GTValues.VA[GTValues.IV]).duration(420)) // (1)\n})\n</code></pre> <ol> <li>Note due to a <code>JS Moment</code> you have to force <code>scannerResearch</code> to be interpreted by Rhino in a specific way. Scanner Research accepts an <code>ItemStack</code> input in the <code>.researchStack()</code> object, and you can also define the <code>EUt</code> and <code>Duration</code> outside of the <code>.researchStack()</code> object.</li> </ol> station_research<pre><code>ServerEvents.recipes(event =&gt; {\n    event.recipes.gtceu.assembly_line('station_test')\n        .itemInputs('64x minecraft:coal')\n        .itemOutputs('minecraft:diamond')\n        .duration(10000)\n        .EUt(GTValues.VA[GTValues.IV])\n        .stationResearch(b =&gt; b.researchStack(Item.of('minecraft:coal_block')).EUt(GTValues.VA[GTValues.IV]).CWUt(10)) // (1)\n})\n</code></pre> <ol> <li>Just like <code>Scanner Research</code> <code>Station Research</code> accepts an <code>ItemStack</code> input in the <code>.researchStack()</code> object, however you can only define <code>EUt</code> and <code>CWUt</code> outside of the <code>.researchStack()</code> object. <code>CWUt</code> is used to define the duration of the <code>Station Research</code> recipe.</li> </ol>"},{"location":"Modpacks/Other-Topics/Adding-and-Removing-Recipes/#rock-breaker-fluids","title":"Rock breaker fluids","text":"<p>Warning</p> <p>When adding rock breaker recipes you will need to manually define the fluids the rock breaker will use. (might change in the future)</p> rock_breaker.js<pre><code>ServerEvents.recipes(event =&gt; {\n    event.recipes.gtceu.rock_breaker('rhino_jank')\n        .notConsumable('minecraft:dirt')\n        .itemOutputs('minecraft:dirt')\n        .addDataString(\"fluidA\", \"minecraft:lava\")\n        .addDataString(\"fluidB\", \"minecraft:water\")\n        .duration(16)\n        .EUt(30)\n})\n</code></pre>"},{"location":"Modpacks/Other-Topics/Custom-Coils/","title":"Custom Coils","text":""},{"location":"Modpacks/Other-Topics/Custom-Coils/#coil-creation","title":"Coil Creation","text":"<pre><code>StartupEvents.registry('block', event =&gt; {\n    event.create('infinity_coil_block', 'gtceu:coil')\n        .temperature(100)\n        .level(0)\n        .energyDiscount(1) // (1)\n        .tier(10)\n        .coilMaterial(() =&gt; GTMaterials.get('infinity'))\n        .texture('kubejs:block/example_block')\n        .hardness(5)\n        .requiresTool(true)\n        .material('metal')\n})\n</code></pre> <ol> <li>The Energy Discount must be at least 1.</li> </ol>"},{"location":"Modpacks/Other-Topics/Custom-Machines/","title":"Custom Machines","text":""},{"location":"Modpacks/Other-Topics/Custom-Machines/#creating-custom-steam-machine","title":"Creating Custom Steam Machine","text":"test_steam_machine.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('test_simple_steam_machine', 'steam', true) // (1)\n})\n</code></pre> <ol> <li>Machine ID, Machine Type, Has High Pressure Varient</li> </ol>"},{"location":"Modpacks/Other-Topics/Custom-Machines/#creating-custom-electric-machine","title":"Creating Custom Electric Machine","text":"test_electric_machine.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('test_electric', 'simple', 0, GTValues.LV, GTValues.MV, GTValues.HV) // (1)\n        .rotationState(RotationState.NON_Y_AXIS)\n        .recipeType('test_recipe_type')\n        .tankScalingFunction(tier =&gt; tier * 3200)\n})\n</code></pre> <ol> <li>Machine ID, Machine Type, Pollution Produced, Voltage Tiers</li> </ol>"},{"location":"Modpacks/Other-Topics/Custom-Machines/#creating-custom-kinetic-machine","title":"Creating Custom Kinetic Machine","text":"test_kinetic_machine.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('test_kinetic', 'kinetic', GTValues.LV, GTValues.MV, GTValues.HV)\n        .rotationState(RotationState.NON_Y_AXIS)\n        .recipeType('test_kinetic_recipe_type')\n        .tankScalingFunction(tier =&gt; tier * 3200)\n})\n</code></pre>"},{"location":"Modpacks/Other-Topics/Custom-Machines/#creating-custom-generator","title":"Creating Custom Generator","text":"test_generator.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('test_generator', 'generator', GTValues.LV, GTValues.MV, GTValues.HV) // (1)\n        .recipeType('test_generator_recipe_type')\n        .tankScalingFunction(tier =&gt; tier * 3200)\n})\n</code></pre>"},{"location":"Modpacks/Other-Topics/Custom-Machines/#creating-custom-multiblock","title":"Creating Custom Multiblock","text":"test_multiblock.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('test_generator', 'multiblock')\n        .tooltips(Component.translatable('your.langfile.entry.here')) // (1)\n        .rotationState(RotationState.NON_Y_AXIS)\n        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)\n        .recipeTypes(['test_recipe_type_1', 'test_recipe_type_2'])\n        .pattern(definition =&gt; FactoryBlockPattern.start()\n            .aisle('CCC', 'GGG', 'CCC')\n            .aisle('CCC', 'GDG', 'CSC')\n            .aisle('CKC', 'GGG', 'CMC')\n            .where('K', Predicates.controller(Predicates.blocks(definition.get())))\n            .where('M', Predicates.abilities(PartAbility.MAINTENANCE))\n            .where('S', Predicates.abilities(PartAbility.MUFFLER))\n            .where('D', Predicates.blocks(GTBlocks.COIL_CUPRONICKEL.get()))\n            .where('G', Predicates.blocks('minecraft:glass'))\n            .where('C', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())\n                .or(Predicates.autoAbilities(definition.getRecipeTypes())))\n        .build())\n        .workableCasingRenderer(\n            \"gtceu:block/casings/solid/machine_casing_inert_ptfe\",\n            \"gtceu:block/multiblock/large_chemical_reactor\",\n            false\n        )\n})\n</code></pre> <ol> <li>You can add tooltips to your multiblock controllers that show up when you mouseover them. Each separate call of <code>.tooltips()</code> will add a separate line to the controller's tooltip. <code>Component.translatable()</code> reads entries from .json lang files placed in <code>kubejs/assets/gtceu/lang</code> or supplied via a standalone resource pack. The <code>Component</code> class is autoloaded by KubeJS at compile time; it doesn't need to be manually loaded.</li> </ol>"},{"location":"Modpacks/Other-Topics/Custom-Machines/#shape-info","title":"Shape Info","text":"<p>Shape Info is used to manually define how your multiblock appears in the JEI/REI/EMI multiblock preview tab.</p> shape_info_test.js<pre><code>GTCEuStartupEvents.registry('gtceu:machine', event =&gt; {\n    event.create('test_generator', 'multiblock')\n        .rotationState(RotationState.NON_Y_AXIS)\n        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)\n        .recipeTypes(['test_recipe_type_1', 'test_recipe_type_2'])\n        .pattern(definition =&gt; FactoryBlockPattern.start()\n            .aisle('CCC', 'GGG', 'CCC')\n            .aisle('CCC', 'GDG', 'CSC')\n            .aisle('CKC', 'GGG', 'CMC')\n            .where('K', Predicates.controller(Predicates.blocks(definition.get())))\n            .where('M', Predicates.abilities(PartAbility.MAINTENANCE))\n            .where('S', Predicates.abilities(PartAbility.MUFFLER))\n            .where('D', Predicates.blocks(GTBlocks.COIL_CUPRONICKEL.get()))\n            .where('G', Predicates.blocks('minecraft:glass'))\n            .where('C', Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())\n                .or(Predicates.autoAbilities(definition.getRecipeTypes())))\n        .build())\n        .shapeInfo(controller =&gt; MultiblockShapeInfo.builder()\n            .aisle('eCe', 'GGG', 'CCC')\n            .aisle('CCC', 'GDG', 'CSC')\n            .aisle('iKo', 'GGG', 'CMC')\n            .where('K', controller, Direction.SOUTH)\n            .where('C', GTBlocks.CASING_STEEL_SOLID.get())\n            .where('G', Block.getBlock('minecraft:glass'))\n            .where('D', GTBlocks.COIL_CUPRONICKEL.get())\n            .where('S', GTMachines.MUFFLER_HATCH[1], Direction.UP)\n            .where('M', GTMachines.MAINTENANCE_HATCH[1], Direction.SOUTH)\n            .where('e', GTMachines.ENERGY_INPUT_HATCH[1], Direction.NORTH)\n            .where('i', GTMachines.ITEM_IMPORT_BUS[1], Direction.SOUTH)\n            .where('0', GTMachines.ITEM_EXPORT_BUS[1], Direction.SOUTH)\n        .build())\n        .workableCasingRenderer(\n            \"gtceu:block/casings/solid/machine_casing_inert_ptfe\",\n            \"gtceu:block/multiblock/large_chemical_reactor\",\n            false\n        )\n})\n</code></pre>"},{"location":"Modpacks/Other-Topics/Custom-Recipe-Types/","title":"Custom Recipe Type","text":""},{"location":"Modpacks/Other-Topics/Custom-Recipe-Types/#creating-a-recipe-type","title":"Creating a Recipe Type","text":"<p>Recipe Types MUST be registered before the machines or multiblocks</p> test_recipe_type.js<pre><code>GTCEuStartupEvents.registry('gtceu:recipe_type', event =&gt; {\n    event.create('test_recipe_type')\n        .category('test')\n        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK)]) // (1)\n        .setEUIO('in')\n        .setMaxIOSize(3, 3, 3, 3) // (2)\n        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)\n        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT) // (3)\n        .setSound(GTSoundEntries.COOLING)\n})\n</code></pre> <ol> <li>If electric and/or multiblock machines can process your custom recipe type, <code>.recipeModifiers()</code> will allow you to fine-tune the behaviour of these machine when running recipes of your custom recipe type. <code>GTRecipeModifiers.PARALLEL_HATCH</code> will enable Multiblock Machines to parallelize recipes of your custom type via an optional Parallel Hatch, while <code>GTRecipeModifiers.ELECTRIC_OVERCLOCK</code>will define how your recipes overclock in electric machines and multiblocks.</li> <li>Max Item Inputs, Max Item Outputs, Max Fluid Inputs, Max Fluid Outputs</li> <li>A list of available <code>GuiTextures</code> and <code>FillDirection</code>s can be found in the GTCEu Modern Github, or in the .jar file.</li> </ol> test_kinetic_recipe_type.js<pre><code>GTCEuStartupEvents.registry('gtceu:recipe_type', event =&gt; {\n    event.create('test_recipe_type')\n        .category('test_kinetic')\n        .setEUIO('in')\n        .setMaxIOSize(3, 3, 3, 3) \n        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)\n        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)\n        .setSound(GTSoundEntries.COOLING)\n        .setMaxTooltip(6) // (1)\n})\n</code></pre> <ol> <li>Helps to adjust the JEI/REI/EMI layout when adding addition conditions to the recipe like RPM and SU.    </li> </ol>"},{"location":"Modpacks/Other-Topics/LDLib-UI-Editor/","title":"LDLib UI Editor","text":"<p>Low Drag Lib (bundled with GTCEu Modern) provides an in-game UI Editor for creating custom GUI's for  machines and for Recipe Types. The UI Editor is accessible in-game  via the command <code>/gtceu ui_editor</code>.</p>"},{"location":"Modpacks/Other-Topics/Modifying-Crafting-Components/","title":"Modifying Crafting Components","text":""},{"location":"Modpacks/Other-Topics/Modifying-Crafting-Components/#changing-a-single-entry","title":"Changing a single entry","text":"<p>With KubeJS it is possible to modify the predefined components of existing GTCEu Modern machine crafting recipes. You can replace singular entries, or do bulk modification of components. -1 is defined as a fallback value if no other entries exist. if you modify in bulk, you MUST insert one if the component expects it to exist. otherwise the game may crash when loading recipes. Other numbers correspond to tier indices. for example: <code>3 == GTValues.HV</code></p> modification.js<pre><code>const Map = Java.loadClass(\"java.util.Map\")\n\nGTCEuServerEvents.craftingComponents(event =&gt; {\n    event.modifyItem(CraftingComponent.CIRCUIT, GTValues.MV, Item.of('minecraft:dirt')) // (1)\n    event.modifyItem(CraftingComponent.PUMP, Map.of(\n        GTValues.FALLBACK, Item.of('gtceu:lv_robot_arm'),\n        GTValues.LV, Item.of('gtceu:lv_robot_arm'),\n        GTValues.MV, Item.of('gtceu:mv_robot_arm'),\n        GTValues.HV, Item.of('gtceu:hv_robot_arm'),\n        GTValues.EV, Item.of('gtceu:ev_robot_arm'),\n        GTValues.IV, Item.of('gtceu:iv_robot_arm'),\n        GTValues.LuV, Item.of('gtceu:luv_robot_arm'),\n        GTValues.ZPM, Item.of('gtceu:zpm_robot_arm'),\n        GTValues.UV, Item.of('gtceu:uv_robot_arm'),\n    )) // (2)\n    event.modifyTag(CraftingComponent.CASING, GTValues.EV, 'minecraft:logs') // (3)\n    event.modifyUnificationEntry(CraftingComponent.PLATE, GTValues.UEV, new UnificationEntry('plate', 'gtceu:infinity')) // (4)\n})\n</code></pre> <ol> <li>Replaces the MV circuit tag in all GT machine crafting recipes with a single block of <code>minecraft:dirt</code>.</li> <li>Modifies all pumps in GT machine crafting recipes by replacing the pump with a robot arm, and reinserts the FALLBACK entry.</li> <li>Replaces the EV casing with the <code>#minecraft:logs</code> tag. note the lack of <code>#</code> at the beginning of the tag!</li> <li>Adds a new entry to the plate component for UEV with prefix <code>plate</code> and material <code>gtceu:infinity</code>.</li> </ol> <p>Bulk Callbacks</p> <p>All the bulk callbacks (<code>modify*</code> functions that take two parameters instead of three, see example 2) work the same as the single modification functions, except they take a map of <code>int: value</code> instead of a single entry.</p>"},{"location":"Modpacks/Other-Topics/Modifying-Crafting-Components/#creating-new-components","title":"Creating new components","text":"<p>It's also possible to create new crafting components with KubeJS. You must add entries for all tiers you're planning to use, and a FALLBACK if the map may be indexed out of bounds at all. It's recommended to always add a FALLBACK entry.</p> creation.js<pre><code>const Map = Java.loadClass(\"java.util.Map\")\n\nlet ITEM_CRAFTING_COMPONENT = null\nlet TAG_CRAFTING_COMPONENT = null\nlet UNIFICATION_CRAFTING_COMPONENT = null\n\nGTCEuServerEvents.craftingComponents(event =&gt; {\n    ITEM_CRAFTING_COMPONENT = event.createItem(Map.of(\n        GTValues.FALLBACK: Item.of('minecraft:cyan_stained_glass'),\n        GTValues.LV: Item.of('minecraft:cyan_stained_glass'),\n        GTValues.MV: Item.of('minecraft:cyan_stained_glass'),\n        GTValues.HV: Item.of('minecraft:cyan_stained_glass'),\n        GTValues.EV: Item.of('minecraft:lime_stained_glass'),\n        GTValues.IV: Item.of('minecraft:lime_stained_glass'),\n        GTValues.LuV: Item.of('minecraft:lime_stained_glass'),\n        GTValues.ZPM: Item.of('minecraft:magenta_stained_glass'),\n        GTValues.UV: Item.of('minecraft:magenta_stained_glass'),\n    )) // (1)\n    TAG_CRAFTING_COMPONENT = event.createTag(Map.of(\n        GTValues.FALLBACK: 'forge:barrels/wooden'\n        GTValues.LV: 'forge:chests/wooden'\n        GTValues.MV: 'forge:chests/trapped'\n        GTValues.HV: 'forge:chests/ender'\n        GTValues.EV: 'forge:cobblestone'\n        GTValues.IV: 'forge:cobblestone/normal'\n        GTValues.LuV: 'forge:cobblestone/infested'\n        GTValues.ZPM: 'forge:cobblestone/mossy'\n        GTValues.UV: 'forge:cobblestone/deepslate'\n    )) // (2)\n    UNIFICATION_CRAFTING_COMPONENT = event.createUnificationEntry(Map.of(\n        GTValues.FALLBACK: new UnificationEntry('plate', 'gtceu:infinity')\n        GTValues.LV: new UnificationEntry('block', 'gtceu:infinity')\n        GTValues.MV: new UnificationEntry('ingot', 'gtceu:infinity')\n        GTValues.HV: new UnificationEntry('dust', 'gtceu:infinity')\n        GTValues.EV: new UnificationEntry('round', 'gtceu:infinity')\n        GTValues.IV: new UnificationEntry('foil', 'gtceu:infinity')\n        GTValues.LuV: new UnificationEntry('longRod', 'gtceu:infinity')\n        GTValues.ZPM: new UnificationEntry('rod', 'gtceu:infinity')\n        GTValues.UV: new UnificationEntry('bolt', 'gtceu:infinity')\n    )) // (3)\n})\n</code></pre> <ol> <li>Creates a new crafting component with item stack entries.</li> <li>Creates a new crafting component with item tag entries. note the lack of <code>#</code> at the beginning of the tag!</li> <li>Creates a new crafting component with UnificationEntry entries.</li> </ol>"},{"location":"Modpacks/Other-Topics/Modifying-Crafting-Components/#builtin-crafting-components","title":"Builtin Crafting Components","text":"<ul> <li><code>CIRCUIT</code></li> <li><code>BETTER_CIRCUIT</code></li> <li><code>PUMP</code></li> <li><code>WIRE_ELECTRIC</code></li> <li><code>WIRE_QUAD</code></li> <li><code>WIRE_OCT</code></li> <li><code>WIRE_HEX</code></li> <li><code>CABLE</code></li> <li><code>CABLE_DOUBLE</code></li> <li><code>CABLE_QUAD</code></li> <li><code>CABLE_OCT</code></li> <li><code>CABLE_HEX</code></li> <li><code>CABLE_TIER_UP</code></li> <li><code>CABLE_TIER_UP_DOUBLE</code></li> <li><code>CABLE_TIER_UP_QUAD</code></li> <li><code>CABLE_TIER_UP_OCT</code></li> <li><code>CABLE_TIER_UP_HEX</code></li> <li><code>CASING</code></li> <li><code>HULL</code></li> <li><code>PIPE_NORMAL</code></li> <li><code>PIPE_LARGE</code></li> <li><code>PIPE_NONUPLE</code></li> <li><code>GLASS</code></li> <li><code>PLATE</code></li> <li><code>HULL_PLATE</code></li> <li><code>MOTOR</code></li> <li><code>ROTOR</code></li> <li><code>SENSOR</code></li> <li><code>GRINDER</code></li> <li><code>SAWBLADE</code></li> <li><code>DIAMOND</code></li> <li><code>PISTON</code></li> <li><code>EMITTER</code></li> <li><code>CONVEYOR</code></li> <li><code>ROBOT_ARM</code></li> <li><code>COIL_HEATING</code></li> <li><code>COIL_HEATING_DOUBLE</code></li> <li><code>COIL_ELECTRIC</code></li> <li><code>STICK_MAGNETIC</code></li> <li><code>STICK_DISTILLATION</code></li> <li><code>FIELD_GENERATOR</code></li> <li><code>STICK_ELECTROMAGNETIC</code></li> <li><code>STICK_RADIOACTIVE</code></li> <li><code>PIPE_REACTOR</code></li> <li><code>POWER_COMPONENT</code></li> <li><code>VOLTAGE_COIL</code></li> <li><code>SPRING</code></li> <li><code>CRATE</code></li> <li><code>DRUM</code></li> <li><code>FRAME</code></li> </ul>"}]}